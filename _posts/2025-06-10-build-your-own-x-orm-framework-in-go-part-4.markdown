---
layout: post
title: 'Build your own X: X√¢y d·ª±ng ORM framework v·ªõi Go - Ph·∫ßn 4'
date: '2025-06-09 22:30'
excerpt: >
  Ph·∫ßn 4 trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng ORM framework v·ªõi Go. Trong b√†i n√†y, ta s·∫Ω tri·ªÉn khai c√°c t√≠nh nƒÉng nh∆∞ c·∫≠p nh·∫≠t, x√≥a, ƒë·∫øm b·∫£n ghi v√† h·ªó tr·ª£ g·ªçi chu·ªói (chain call) ƒë·ªÉ vi·∫øt truy v·∫•n g·ªçn g√†ng h∆°n.
comments: false
---

# Ph·∫ßn 4: Chain Operation, Update v√† Delete

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

ƒê√¢y l√† b√†i vi·∫øt th·ª© t∆∞ trong lo·∫°t b√†i h∆∞·ªõng d·∫´n x√¢y d·ª±ng ORM framework GeeORM t·ª´ ƒë·∫ßu b·∫±ng Go trong 7 ng√†y.

·ªû ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng chain operation ƒë·ªÉ k·∫øt h·ª£p nhi·ªÅu ƒëi·ªÅu ki·ªán truy v·∫•n (where, order by, limit, ...) m·ªôt c√°ch linh ho·∫°t v√† hi·ªáu qu·∫£.

## 1. H·ªó tr·ª£ Update, Delete v√† Count

### 1.1 Clause Generator

`Clause` ch·ªãu tr√°ch nhi·ªám x√¢y d·ª±ng c√¢u l·ªánh SQL. N·∫øu mu·ªën b·ªï sung c√°c ch·ª©c nƒÉng update, delete, count th√¨ b∆∞·ªõc ƒë·∫ßu ti√™n l√† ph·∫£i tri·ªÉn khai c√°c generator cho c√°c m·ªánh ƒë·ªÅ update, delete, count trong clause.

**B∆∞·ªõc 1:** Th√™m ba gi√° tr·ªã enum m·ªõi `UPDATE`, `DELETE`, `COUNT` v√†o danh s√°ch c√°c lo·∫°i m·ªánh ƒë·ªÅ.

```go
// part-4-chain-operation/clause/clause.go

// C√°c lo·∫°i m·ªánh ƒë·ªÅ h·ªó tr·ª£ trong Clause
const (
    INSERT Type = iota
    VALUES
    SELECT
    LIMIT
    WHERE
    ORDERBY
    UPDATE
    DELETE
    COUNT
)
```

**B∆∞·ªõc 2:** Tri·ªÉn khai generator cho t·ª´ng m·ªánh ƒë·ªÅ v√† ƒëƒÉng k√Ω v√†o bi·∫øn to√†n c·ª•c generators.

```go
// part-4-chain-operation/clause/generator.go

func init() {
    generators = make(map[Type]generator)
    generators[INSERT] = _insert
    generators[VALUES] = _values
    generators[SELECT] = _select
    generators[LIMIT] = _limit
    generators[WHERE] = _where
    generators[ORDERBY] = _orderBy
    generators[UPDATE] = _update
    generators[DELETE] = _delete
    generators[COUNT] = _count
}

// _update t·∫°o ra c√¢u l·ªánh SQL UPDATE v√† danh s√°ch c√°c bi·∫øn cho c√¢u l·ªánh ƒë√≥.
// Tham s·ªë:
//   - values[0]: T√™n c·ªßa b·∫£ng c·∫ßn c·∫≠p nh·∫≠t (string).
//   - values[1]: M·ªôt map[string]interface{} ch·ª©a c√°c c·∫∑p key-value c·∫ßn c·∫≠p nh·∫≠t.
//     Key l√† t√™n c·ªôt, value l√† gi√° tr·ªã m·ªõi c·ªßa c·ªôt ƒë√≥.
// K·∫øt qu·∫£:
//   - M·ªôt chu·ªói ch·ª©a c√¢u l·ªánh SQL UPDATE.
//   - M·ªôt slice interface{} ch·ª©a c√°c gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi c√°c placeholder "?" trong c√¢u l·ªánh SQL.
func _update(values ...interface{}) (string, []interface{}) {
    tableName := values[0]
    m := values[1].(map[string]interface{})
    var keys []string
    var vars []interface{}
    for k, v := range m {
        keys = append(keys, k+" = ?")
        vars = append(vars, v)
    }
    return fmt.Sprintf("UPDATE %s SET %s", tableName, strings.Join(keys, ", ")), vars
}

// _delete t·∫°o ra c√¢u l·ªánh SQL DELETE.
// Tham s·ªë:
//   - values[0]: T√™n c·ªßa b·∫£ng c·∫ßn x√≥a (string).
// K·∫øt qu·∫£:
//   - M·ªôt chu·ªói ch·ª©a c√¢u l·ªánh SQL DELETE.
//   - M·ªôt slice interface{} r·ªóng.
func _delete(values ...interface{}) (string, []interface{}) {
    return fmt.Sprintf("DELETE FROM %s", values[0]), []interface{}{}
}

// _count t·∫°o ra c√¢u l·ªánh SQL SELECT COUNT(*).
// Tham s·ªë:
//   - values[0]: T√™n c·ªßa b·∫£ng c·∫ßn ƒë·∫øm (string).
// K·∫øt qu·∫£:
//   - M·ªôt chu·ªói ch·ª©a c√¢u l·ªánh SQL SELECT COUNT(*).
//   - M·ªôt slice interface{} r·ªóng.
func _count(values ...interface{}) (string, []interface{}) {
    return _select(values[0], []string{"count(*)"})
}
```
##### V√≠ d·ª• minh h·ªça cho t·ª´ng generator

- **UPDATE**
G·ªçi: `_update("User", map[string]interface{}{"name": "Tom", "age": 18})`  
K·∫øt qu·∫£:
    - Chu·ªói SQL: `UPDATE User SET name = ?, age = ?`
    - Tham s·ªë: `[]interface{}{"Tom", 18}`

- **DELETE**
G·ªçi: `_delete("User")`  
K·∫øt qu·∫£:
    - Chu·ªói SQL: `DELETE FROM User`
    - Tham s·ªë: `[]interface{}{}`

- **COUNT**
G·ªçi: `_count("User")`  
K·∫øt qu·∫£:
    - Chu·ªói SQL: `SELECT count(*) FROM User`
    - Tham s·ªë: `[]interface{}{}`

### 1.2 Ph∆∞∆°ng th·ª©c Update
Sau khi ƒë√£ x√¢y d·ª±ng generator cho t·ª´ng m·ªánh ƒë·ªÅ SQL, vi·ªác th·ª±c hi·ªán thao t√°c Update tr·ªü n√™n ƒë∆°n gi·∫£n: ch·ªâ c·∫ßn k·∫øt h·ª£p c√°c clause theo ƒë√∫ng th·ª© t·ª± r·ªìi th·ª±c thi, t∆∞∆°ng t·ª± nh∆∞ c√°ch ta ƒë√£ l√†m v·ªõi Insert v√† Find.

```go
// part-4-chain-operation/session/record.go

// H·ªó tr·ª£ c·∫£ hai ki·ªÉu tham s·ªë:
// - map[string]interface{}: {"Name": "Tom", "Age": 18}
// - danh s√°ch key-value ph·∫≥ng: "Name", "Tom", "Age", 18
func (s *Session) Update(kv ...interface{}) (int64, error) {
    // B∆∞·ªõc 1: Chu·∫©n h√≥a input th√†nh map
    m, ok := kv[0].(map[string]interface{})
    if !ok {
        // N·∫øu kh√¥ng ph·∫£i map, chuy·ªÉn t·ª´ danh s√°ch key-value sang map
        m = make(map[string]interface{})
        for i := 0; i < len(kv); i += 2 {
            m[kv[i].(string)] = kv[i+1]
        }
    }

    // B∆∞·ªõc 2: ƒêƒÉng k√Ω m·ªánh ƒë·ªÅ UPDATE
    s.clause.Set(clause.UPDATE, s.RefTable().Name, m)

    // B∆∞·ªõc 3: T·∫°o c√¢u SQL t·ª´ c√°c m·ªánh ƒë·ªÅ UPDATE v√† WHERE
    sql, vars := s.clause.Build(clause.UPDATE, clause.WHERE)

    // B∆∞·ªõc 4: Th·ª±c thi c√¢u SQL
    result, err := s.Raw(sql, vars...).Exec()
    if err != nil {
        return 0, err
    }

    // B∆∞·ªõc 5: Tr·∫£ v·ªÅ s·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng
    return result.RowsAffected()
}
```

ƒêi·ªÉm ƒë·∫∑c bi·ªát c·ªßa ph∆∞∆°ng th·ª©c Update l√† t√≠nh linh ho·∫°t trong c√°ch nh·∫≠n tham s·ªë. B·∫°n c√≥ th·ªÉ truy·ªÅn v√†o m·ªôt map[string]interface{} ho·∫∑c m·ªôt chu·ªói c√°c c·∫∑p key-value. Trong tr∆∞·ªùng h·ª£p kh√¥ng ph·∫£i map, h√†m s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi v·ªÅ d·∫°ng map tr∆∞·ªõc khi x·ª≠ l√Ω ti·∫øp. ƒêi·ªÅu n√†y gi√∫p ng∆∞·ªùi d√πng linh ho·∫°t h∆°n khi g·ªçi h√†m, ƒë·ªìng th·ªùi gi·ªØ cho ph·∫ßn x·ª≠ l√Ω logic b√™n trong lu√¥n nh·∫•t qu√°n.

**V√≠ d·ª• s·ª≠ d·ª•ng**
```go
// C√°ch 1: S·ª≠ d·ª•ng map
data := map[string]interface{}{
    "Name": "John",
    "Age":  25,
}
rowsAffected, err := session.Update(data)

// C√°ch 2: S·ª≠ d·ª•ng danh s√°ch key-value ph·∫≥ng
rowsAffected, err := session.Update("Name", "John", "Age", 25)
```
C·∫£ hai c√°ch s·ª≠ d·ª•ng tr√™n ƒë·ªÅu t·∫°o ra c√πng m·ªôt c√¢u SQL UPDATE v√† cho k·∫øt qu·∫£ gi·ªëng nhau.
### 1.3 Ph∆∞∆°ng th·ª©c Delete
Ph∆∞∆°ng th·ª©c Delete d√πng ƒë·ªÉ x√≥a c√°c b·∫£n ghi trong b·∫£ng d·ª±a tr√™n ƒëi·ªÅu ki·ªán WHERE ƒë√£ thi·∫øt l·∫≠p tr∆∞·ªõc ƒë√≥.
```go
// X√≥a b·∫£n ghi d·ª±a tr√™n m·ªánh ƒë·ªÅ WHERE
func (s *Session) Delete() (int64, error) {
    // B∆∞·ªõc 1: ƒêƒÉng k√Ω m·ªánh ƒë·ªÅ DELETE v·ªõi t√™n b·∫£ng
    s.clause.Set(clause.DELETE, s.RefTable().Name)

    // B∆∞·ªõc 2: T·∫°o c√¢u SQL t·ª´ DELETE v√† WHERE clause
    sql, vars := s.clause.Build(clause.DELETE, clause.WHERE)

    // B∆∞·ªõc 3: Th·ª±c thi c√¢u l·ªánh SQL
    result, err := s.Raw(sql, vars...).Exec()
    if err != nil {
        return 0, err
    }

    // B∆∞·ªõc 4: Tr·∫£ v·ªÅ s·ªë b·∫£n ghi b·ªã x√≥a
    return result.RowsAffected()
}
```

### 1.4 Ph∆∞∆°ng th·ª©c Count
Ph∆∞∆°ng th·ª©c Count ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi trong b·∫£ng, c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi m·ªánh ƒë·ªÅ WHERE ƒë·ªÉ ƒë·∫øm c√≥ ƒëi·ªÅu ki·ªán.
```go
// ƒê·∫øm s·ªë b·∫£n ghi v·ªõi m·ªánh ƒë·ªÅ WHERE
func (s *Session) Count() (int64, error) {
    // B∆∞·ªõc 1: ƒêƒÉng k√Ω m·ªánh ƒë·ªÅ COUNT v·ªõi t√™n b·∫£ng
    s.clause.Set(clause.COUNT, s.RefTable().Name)

    // B∆∞·ªõc 2: T·∫°o c√¢u SQL t·ª´ COUNT v√† WHERE clause
    sql, vars := s.clause.Build(clause.COUNT, clause.WHERE)

    // B∆∞·ªõc 3: Th·ª±c thi truy v·∫•n v√† ƒë·ªçc k·∫øt qu·∫£
    row := s.Raw(sql, vars...).QueryRow()
    var tmp int64
    if err := row.Scan(&tmp); err != nil {
        return 0, err
    }

    // B∆∞·ªõc 4: Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng b·∫£n ghi
    return tmp, nil
}
```

## 2. Chain Call (G·ªçi chu·ªói)
**Chain call** l√† m·ªôt k·ªπ thu·∫≠t l·∫≠p tr√¨nh gi√∫p vi·∫øt code ng·∫Øn g·ªçn v√† d·ªÖ ƒë·ªçc h∆°n. √ù t∆∞·ªüng ƒë∆°n gi·∫£n l√†: m·ªói ph∆∞∆°ng th·ª©c sau khi th·ª±c thi s·∫Ω tr·∫£ v·ªÅ ch√≠nh ƒë·ªëi t∆∞·ª£ng ƒë√≥ (·ªü ƒë√¢y l√† *Session), nh·ªù v·∫≠y ta c√≥ th·ªÉ g·ªçi ti·∫øp c√°c ph∆∞∆°ng th·ª©c kh√°c li√™n ti·∫øp tr√™n c√πng m·ªôt d√≤ng.

C√°ch x√¢y d·ª±ng m·ªôt c√¢u l·ªánh SQL r·∫•t ph√π h·ª£p v·ªõi c√°ch g·ªçi chu·ªói n√†y, v√¨ SQL th∆∞·ªùng c√≥ nhi·ªÅu ph·∫ßn nh∆∞ WHERE, LIMIT, ORDER BY, v.v.

V√≠ d·ª•:
```go
s := geeorm.NewEngine("sqlite3", "gee.db").NewSession()
var users []User
s.Where("Age > 18").Limit(3).Find(&users)
```
C√¢u l·ªánh tr√™n t∆∞∆°ng ƒë∆∞∆°ng v·ªõi truy v·∫•n:
```sql
SELECT * FROM User WHERE Age > 18 LIMIT 3
```

C√°c ph·∫ßn nh∆∞ WHERE, LIMIT, ORDER BY l√† c√°c m·ªánh ƒë·ªÅ ph·ªï bi·∫øn trong SQL,  r·∫•t ph√π h·ª£p ƒë·ªÉ chain call. Ta ch·ªâ c·∫ßn ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c t∆∞∆°ng ·ª©ng trong session/record.go nh∆∞ sau:
```go
// Th√™m ƒëi·ªÅu ki·ªán LIMIT v√†o clause
func (s *Session) Limit(num int) *Session {
    s.clause.Set(clause.LIMIT, num)
    return s
}

// Th√™m ƒëi·ªÅu ki·ªán WHERE v√†o clause
func (s *Session) Where(desc string, args ...interface{}) *Session {
    var vars []interface{}
    s.clause.Set(clause.WHERE, append(append(vars, desc), args...)...)
    return s
}

// Th√™m ƒëi·ªÅu ki·ªán ORDER BY v√†o clause
func (s *Session) OrderBy(desc string) *Session {
    s.clause.Set(clause.ORDERBY, desc)
    return s
}
```

## 3. First - Truy v·∫•n v√† tr·∫£ v·ªÅ m·ªôt b·∫£n ghi duy nh·∫•t
Trong nhi·ªÅu tr∆∞·ªùng h·ª£p, ta ch·ªâ c·∫ßn l·∫•y **m·ªôt b·∫£n ghi duy nh·∫•t** t·ª´ c∆° s·ªü d·ªØ li·ªáu. V√≠ d·ª•, truy v·∫•n th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng theo ID, ho·∫∑c l·∫•y b·∫£n ghi m·ªõi nh·∫•t/d·ªØ li·ªáu ƒë·∫ßu ti√™n th·ªèa m√£n ƒëi·ªÅu ki·ªán n√†o ƒë√≥.

ƒê·ªÉ l√†m ƒëi·ªÅu n√†y, ta c√≥ th·ªÉ t·∫≠n d·ª•ng chain call c√πng v·ªõi h√†m Limit(1) v√† Find() ƒë·ªÉ x√¢y d·ª±ng h√†m First.

**ƒê·ªãnh nghƒ©a h√†m `First`:**

```go
func (s *Session) First(value interface{}) error {
    // Chuy·ªÉn con tr·ªè value th√†nh gi√° tr·ªã th·ª±c
    dest := reflect.Indirect(reflect.ValueOf(value))

    // T·∫°o m·ªôt slice t·∫°m th·ªùi c√≥ c√πng ki·ªÉu v·ªõi bi·∫øn value truy·ªÅn v√†o
    destSlice := reflect.New(reflect.SliceOf(dest.Type())).Elem()

    // G·ªçi Find v·ªõi gi·ªõi h·∫°n 1 b·∫£n ghi
    if err := s.Limit(1).Find(destSlice.Addr().Interface()); err != nil {
        return err
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi n√†o, tr·∫£ v·ªÅ l·ªói
    if destSlice.Len() == 0 {
        return errors.New("NOT FOUND")
    }

    // L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n t·ª´ slice v√† g√°n v√†o value
    dest.Set(destSlice.Index(0))
    return nil
}
```

**C√°ch s·ª≠ d·ª•ng:**

```go
u := &User{}
_ = s.OrderBy("Age DESC").First(u)
```
Truy v·∫•n tr√™n t∆∞∆°ng ƒë∆∞∆°ng v·ªõi:
```sql
SELECT * FROM User ORDER BY Age DESC LIMIT 1;
```
Bi·∫øn u s·∫Ω ch·ª©a b·∫£n ghi ƒë·∫ßu ti√™n theo th·ª© t·ª± tu·ªïi gi·∫£m d·∫ßn.

## 4. Ki·ªÉm th·ª≠
Ch√∫ng ta s·∫Ω th√™m c√°c test case v√†o file record_test.go ƒë·ªÉ ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c nh∆∞ Limit, Update, Delete, v√† Count

**Thi·∫øt l·∫≠p d·ªØ li·ªáu test**
```go
package session

import "testing"

var (
    user1 = &User{"Tom", 18}
    user2 = &User{"Sam", 25}
    user3 = &User{"Jack", 25}
)

// H√†m kh·ªüi t·∫°o session v√† t·∫°o d·ªØ li·ªáu m·∫´u
func testRecordInit(t *testing.T) *Session {
    t.Helper() // ƒê√°nh d·∫•u h√†m h·ªó tr·ª£ cho test

    s := NewSession().Model(&User{})

    // X√≥a b·∫£ng n·∫øu c√≥, t·∫°o l·∫°i b·∫£ng m·ªõi v√† ch√®n d·ªØ li·ªáu
    err1 := s.DropTable()
    err2 := s.CreateTable()
    _, err3 := s.Insert(user1, user2)

    if err1 != nil || err2 != nil || err3 != nil {
        t.Fatal("failed init test records") // B√°o l·ªói n·∫øu setup th·∫•t b·∫°i
    }
    return s
}
```
**Ki·ªÉm tra ph∆∞∆°ng th·ª©c `Limit`**
```go
func TestSession_Limit(t *testing.T) {
    s := testRecordInit(t)
    var users []User
    err := s.Limit(1).Find(&users)

    if err != nil || len(users) != 1 {
        t.Fatal("failed to query with limit condition")
    }
}
```
**Ki·ªÉm tra ph∆∞∆°ng th·ª©c `Update`**
```go
func TestSession_Update(t *testing.T) {
    s := testRecordInit(t)

    // C·∫≠p nh·∫≠t tu·ªïi c·ªßa user c√≥ t√™n l√† "Tom" th√†nh 30
    affected, _ := s.Where("Name = ?", "Tom").Update("Age", 30)

    u := &User{}
    _ = s.OrderBy("Age DESC").First(u)

    if affected != 1 || u.Age != 30 {
        t.Fatal("failed to update")
    }
}
```
**Ki·ªÉm tra ph∆∞∆°ng th·ª©c `Delete` v√† `Count`**
```go
func TestSession_DeleteAndCount(t *testing.T) {
    s := testRecordInit(t)

    // X√≥a user t√™n l√† "Tom"
    affected, _ := s.Where("Name = ?", "Tom").Delete()

    // ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi c√≤n l·∫°i
    count, _ := s.Count()

    if affected != 1 || count != 0 {
        t.Fatal("failed to delete or count")
    }
}
```
## 5. K·∫øt lu·∫≠n

Sau ph·∫ßn n√†y, b·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c:

- C√°ch x√¢y d·ª±ng c√°c generator cho c√°c m·ªánh ƒë·ªÅ UPDATE, DELETE, COUNT trong clause.
- Th√™m v√† s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c Update, Delete, Count trong Session.
- √Åp d·ª•ng chain call cho c√°c m·ªánh ƒë·ªÅ WHERE, LIMIT, ORDER BY ƒë·ªÉ code ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc.
- C√°ch tri·ªÉn khai h√†m First ƒë·ªÉ truy v·∫•n m·ªôt b·∫£n ghi duy nh·∫•t.
- Vi·∫øt c√°c test case ki·ªÉm th·ª≠ c√°c ch·ª©c nƒÉng v·ª´a x√¢y d·ª±ng.

·ªû c√°c ph·∫ßn ti·∫øp theo, ch√∫ng ta s·∫Ω ti·∫øp t·ª•c ho√†n thi·ªán v√† m·ªü r·ªông GeeORM v·ªõi nhi·ªÅu t√≠nh nƒÉng m·∫°nh m·∫Ω h∆°n n·ªØa. H√£y c√πng theo d√µi!