---
layout: post
title: 'Build your own X: X√¢y d·ª±ng ORM framework v·ªõi Go - Ph·∫ßn 2'
date: '2025-06-03 14:30'
excerpt: >-
  Ph·∫ßn 2 trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng ORM framework v·ªõi Go. B√†i vi·∫øt h∆∞·ªõng d·∫´n c√°ch t·∫°o l·ªõp Dialect ƒë·ªÉ h·ªó tr·ª£ nhi·ªÅu lo·∫°i c∆° s·ªü d·ªØ li·ªáu, s·ª≠ d·ª•ng reflection ƒë·ªÉ chuy·ªÉn ƒë·ªïi struct th√†nh b·∫£ng, v√† tri·ªÉn khai c√°c thao t√°c qu·∫£n l√Ω b·∫£ng d·ªØ li·ªáu.
comments: false
---

# Ph·∫ßn 2: Chuy·ªÉn ƒë·ªïi struct th√†nh b·∫£ng trong GeeORM

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

ƒê√¢y l√† b√†i vi·∫øt th·ª© hai trong lo·∫°t b√†i h∆∞·ªõng d·∫´n x√¢y d·ª±ng ORM framework GeeORM t·ª´ ƒë·∫ßu b·∫±ng Go trong 7 ng√†y.

## M·ª•c ti√™u c·ªßa b√†i vi·∫øt n√†y

- T·∫°o l·ªõp Dialect ƒë·ªÉ h·ªó tr·ª£ nhi·ªÅu lo·∫°i c∆° s·ªü d·ªØ li·ªáu v√† c√¥ l·∫≠p s·ª± kh√°c bi·ªát gi·ªØa ch√∫ng
- S·ª≠ d·ª•ng reflection ƒë·ªÉ ph√¢n t√≠ch struct v√† chuy·ªÉn ƒë·ªïi th√†nh b·∫£ng trong h·ªá th·ªëng qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu
- Tri·ªÉn khai c√°c thao t√°c t·∫°o v√† x√≥a b·∫£ng d·ªØ li·ªáu

## 1. Dialect

C√°c ki·ªÉu d·ªØ li·ªáu trong SQL kh√°c v·ªõi c√°c ki·ªÉu d·ªØ li·ªáu trong Go. V√≠ d·ª•, ki·ªÉu `int`, `int8`, `int16` trong Go ƒë·ªÅu t∆∞∆°ng ·ª©ng v·ªõi ki·ªÉu `integer` trong SQLite. Do ƒë√≥, b∆∞·ªõc ƒë·∫ßu ti√™n trong vi·ªác x√¢y d·ª±ng ORM l√† t·∫°o c∆° ch·∫ø chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu t·ª´ Go sang SQL.

Ngo√†i ra, m·ªói h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu (MySQL, PostgreSQL, SQLite...) c√≥ c√∫ ph√°p SQL ri√™ng. ƒê·ªÉ ORM framework c√≥ th·ªÉ ho·∫°t ƒë·ªông v·ªõi nhi·ªÅu lo·∫°i c∆° s·ªü d·ªØ li·ªáu, ch√∫ng ta c·∫ßn t·∫°o m·ªôt l·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªÉ c√¥ l·∫≠p nh·ªØng kh√°c bi·ªát n√†y. L·ªõp tr·ª´u t∆∞·ª£ng n√†y ƒë∆∞·ª£c g·ªçi l√† "dialect" (ph∆∞∆°ng ng·ªØ).

ƒê·∫ßu ti√™n, t·∫°o th∆∞ m·ª•c `dialect` v√† file `dialect.go` ƒë·ªÉ ƒë·ªãnh nghƒ©a interface chung:

```go
package dialect

import "reflect"

var dialectsMap = map[string]Dialect{}

type Dialect interface {
    DataTypeOf(typ reflect.Value) string
    TableExistSQL(tableName string) (string, []interface{})
}

func RegisterDialect(name string, dialect Dialect) {
    dialectsMap[name] = dialect
}

func GetDialect(name string) (dialect Dialect, ok bool) {
    dialect, ok = dialectsMap[name]
    return
}
```

Interface `Dialect` ƒë·ªãnh nghƒ©a hai ph∆∞∆°ng th·ª©c c·∫ßn thi·∫øt:

- `DataTypeOf` - Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu Go sang ki·ªÉu d·ªØ li·ªáu SQL t∆∞∆°ng ·ª©ng
- `TableExistSQL` - T·∫°o c√¢u l·ªánh SQL ƒë·ªÉ ki·ªÉm tra xem m·ªôt b·∫£ng c√≥ t·ªìn t·∫°i kh√¥ng

Hai h√†m `RegisterDialect` v√† `GetDialect` gi√∫p qu·∫£n l√Ω c√°c dialect kh√°c nhau trong h·ªá th·ªëng. Khi c·∫ßn h·ªó tr·ª£ m·ªôt c∆° s·ªü d·ªØ li·ªáu m·ªõi, ch·ªâ c·∫ßn t·∫°o m·ªôt dialect m·ªõi v√† ƒëƒÉng k√Ω n√≥.

Ti·∫øp theo, t·∫°o file `sqlite3.go` ƒë·ªÉ tri·ªÉn khai dialect cho SQLite:

```go
package dialect

import (
    "fmt"
    "reflect"
    "time"
)

type sqlite3 struct{}

var _ Dialect = (*sqlite3)(nil)

func init() {
    RegisterDialect("sqlite3", &sqlite3{})
}

func (s *sqlite3) DataTypeOf(typ reflect.Value) string {
    switch typ.Kind() {
    case reflect.Bool:
        return "bool"
    case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32,
        reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uintptr:
        return "integer"
    case reflect.Int64, reflect.Uint64:
        return "bigint"
    case reflect.Float32, reflect.Float64:
        return "real"
    case reflect.String:
        return "text"
    case reflect.Array, reflect.Slice:
        return "blob"
    case reflect.Struct:
        if _, ok := typ.Interface().(time.Time); ok {
            return "datetime"
        }
    }
    panic(fmt.Sprintf("invalid sql type %s (%s)", typ.Type().Name(), typ.Kind()))
}

func (s *sqlite3) TableExistSQL(tableName string) (string, []interface{}) {
    args := []interface{}{tableName}
    return "SELECT name FROM sqlite_master WHERE type='table' and name = ?", args
}
```

Trong tri·ªÉn khai n√†y:
- `DataTypeOf` √°nh x·∫° c√°c ki·ªÉu d·ªØ li·ªáu Go sang ki·ªÉu d·ªØ li·ªáu SQLite t∆∞∆°ng ·ª©ng
- `TableExistSQL` t·∫°o c√¢u l·ªánh SQL ƒë·ªÉ ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa b·∫£ng trong SQLite
- H√†m `init()` t·ª± ƒë·ªông ƒëƒÉng k√Ω dialect SQLite khi package ƒë∆∞·ª£c import

V·ªõi c√°ch thi·∫øt k·∫ø n√†y, ch√∫ng ta c√≥ th·ªÉ d·ªÖ d√†ng m·ªü r·ªông framework ƒë·ªÉ h·ªó tr·ª£ c√°c c∆° s·ªü d·ªØ li·ªáu kh√°c nh∆∞ MySQL, PostgreSQL m√† kh√¥ng c·∫ßn thay ƒë·ªïi ph·∫ßn code c√≤n l·∫°i.

## 2. Schema

Sau khi ƒë√£ t·∫°o Dialect ƒë·ªÉ x·ª≠ l√Ω s·ª± kh√°c bi·ªát gi·ªØa c√°c c∆° s·ªü d·ªØ li·ªáu, b∆∞·ªõc ti·∫øp theo l√† x√¢y d·ª±ng th√†nh ph·∫ßn c·ªët l√µi c·ªßa ORM - chuy·ªÉn ƒë·ªïi struct Go th√†nh schema c∆° s·ªü d·ªØ li·ªáu. Ch√∫ng ta c·∫ßn √°nh x·∫° c√°c th√†nh ph·∫ßn c·ªßa struct sang c√°c th√†nh ph·∫ßn t∆∞∆°ng ·ª©ng trong b·∫£ng d·ªØ li·ªáu.

ƒê·ªÉ t·∫°o m·ªôt b·∫£ng trong c∆° s·ªü d·ªØ li·ªáu, ch√∫ng ta c·∫ßn c√°c th√¥ng tin sau:

- T√™n b·∫£ng ‚Üí L·∫•y t·ª´ t√™n struct
- T√™n c·ªôt v√† ki·ªÉu d·ªØ li·ªáu ‚Üí L·∫•y t·ª´ t√™n v√† ki·ªÉu c·ªßa c√°c tr∆∞·ªùng trong struct
- R√†ng bu·ªôc (constraints) ‚Üí L·∫•y t·ª´ struct tags

V√≠ d·ª•, v·ªõi struct Go nh∆∞ sau:

```go
type User struct {
    Name string `geeorm:"PRIMARY KEY"`
    Age  int
}
```

Ch√∫ng ta mu·ªën t·∫°o c√¢u l·ªánh SQL t∆∞∆°ng ·ª©ng:

```sql
CREATE TABLE `User` (`Name` text PRIMARY KEY, `Age` integer);
```

ƒê·ªÉ l√†m ƒë∆∞·ª£c ƒëi·ªÅu n√†y, ch√∫ng ta t·∫°o package `schema` v·ªõi file `schema.go`:

```go
package schema

import (
    "geeorm/dialect"
    "go/ast"
    "reflect"
)

// Field ƒë·∫°i di·ªán cho m·ªôt c·ªôt trong c∆° s·ªü d·ªØ li·ªáu
type Field struct {
    Name string // T√™n c·ªôt
    Type string // Ki·ªÉu d·ªØ li·ªáu SQL
    Tag  string // R√†ng bu·ªôc (constraints)
}

// Schema ƒë·∫°i di·ªán cho m·ªôt b·∫£ng trong c∆° s·ªü d·ªØ li·ªáu
type Schema struct {
    Model      interface{} // Struct g·ªëc
    Name       string      // T√™n b·∫£ng
    Fields     []*Field    // Danh s√°ch c√°c c·ªôt
    FieldNames []string    // Danh s√°ch t√™n c·ªôt
    fieldMap   map[string]*Field // Map t√™n c·ªôt -> th√¥ng tin c·ªôt
}

// GetField tr·∫£ v·ªÅ th√¥ng tin c·ªßa m·ªôt c·ªôt theo t√™n
func (schema *Schema) GetField(name string) *Field {
    return schema.fieldMap[name]
}
```

Ti·∫øp theo, ch√∫ng ta c·∫ßn h√†m `Parse` ƒë·ªÉ ph√¢n t√≠ch struct v√† t·∫°o schema:

```go
func Parse(dest interface{}, d dialect.Dialect) *Schema {
    // L·∫•y ki·ªÉu c·ªßa struct (b·ªè qua con tr·ªè n·∫øu c√≥)
    modelType := reflect.Indirect(reflect.ValueOf(dest)).Type()
    
    // Kh·ªüi t·∫°o schema
    schema := &Schema{
        Model:    dest,
        Name:     modelType.Name(),
        fieldMap: make(map[string]*Field),
    }

    // Duy·ªát qua t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa struct
    for i := 0; i < modelType.NumField(); i++ {
        p := modelType.Field(i)
        // Ch·ªâ x·ª≠ l√Ω c√°c tr∆∞·ªùng ƒë∆∞·ª£c export (vi·∫øt hoa)
        if !p.Anonymous && ast.IsExported(p.Name) {
            // T·∫°o ƒë·ªëi t∆∞·ª£ng Field
            field := &Field{
                Name: p.Name,
                Type: d.DataTypeOf(reflect.Indirect(reflect.New(p.Type))),
            }
            // ƒê·ªçc tag n·∫øu c√≥
            if v, ok := p.Tag.Lookup("geeorm"); ok {
                field.Tag = v
            }
            // Th√™m v√†o schema
            schema.Fields = append(schema.Fields, field)
            schema.FieldNames = append(schema.FieldNames, p.Name)
            schema.fieldMap[p.Name] = field
        }
    }
    return schema
}
```

H√†m `Parse` s·ª≠ d·ª•ng reflection ƒë·ªÉ:
1. L·∫•y th√¥ng tin v·ªÅ ki·ªÉu c·ªßa struct
2. Duy·ªát qua t·ª´ng tr∆∞·ªùng trong struct
3. Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu Go sang ki·ªÉu SQL th√¥ng qua Dialect
4. ƒê·ªçc c√°c tag ƒë·ªÉ l·∫•y r√†ng bu·ªôc
5. L∆∞u tr·ªØ th√¥ng tin trong ƒë·ªëi t∆∞·ª£ng Schema

ƒê·ªÉ ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn, ch√∫ng ta vi·∫øt test case:

```go
// schema_test.go
type User struct {
    Name string `geeorm:"PRIMARY KEY"`
    Age  int
}

var TestDial, _ = dialect.GetDialect("sqlite3")

func TestParse(t *testing.T) {
    schema := Parse(&User{}, TestDial)
    if schema.Name != "User" || len(schema.Fields) != 2 {
        t.Fatal("failed to parse User struct")
    }
    if schema.GetField("Name").Tag != "PRIMARY KEY" {
        t.Fatal("failed to parse primary key")
    }
}
```

## 3. Session

ƒê·ªÉ l√†m vi·ªác v·ªõi schema v√† qu·∫£n l√Ω b·∫£ng d·ªØ li·ªáu, ch√∫ng ta c·∫ßn m·ªü r·ªông c·∫•u tr√∫c Session ƒë√£ t·∫°o ·ªü ph·∫ßn tr∆∞·ªõc:

```go
type Session struct {
    db       *sql.DB
    dialect  dialect.Dialect
    refTable *schema.Schema
    sql      strings.Builder
    sqlVars  []interface{}
}

func New(db *sql.DB, dialect dialect.Dialect) *Session {
    return &Session{
        db:      db,
        dialect: dialect,
    }
}
```

Ch√∫ng ta ƒë√£ th√™m hai tr∆∞·ªùng m·ªõi v√†o c·∫•u tr√∫c Session:
- `dialect` - l∆∞u tr·ªØ dialect ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu
- `refTable` - l∆∞u tr·ªØ schema c·ªßa ƒë·ªëi t∆∞·ª£ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω

Ti·∫øp theo, t·∫°o file `table.go` trong th∆∞ m·ª•c session ƒë·ªÉ tri·ªÉn khai c√°c thao t√°c qu·∫£n l√Ω b·∫£ng:

```go
func (s *Session) Model(value interface{}) *Session {
    // nil or different model, update refTable
    if s.refTable == nil || reflect.TypeOf(value) != reflect.TypeOf(s.refTable.Model) {
        s.refTable = schema.Parse(value, s.dialect)
    }
    return s
}

func (s *Session) RefTable() *schema.Schema {
    if s.refTable == nil {
        log.Error("Model is not set")
    }
    return s.refTable
}
```

Ph∆∞∆°ng th·ª©c `Model()` nh·∫≠n m·ªôt ƒë·ªëi t∆∞·ª£ng v√† l∆∞u schema c·ªßa n√≥ v√†o `refTable`. ƒê·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t, ch√∫ng ta ch·ªâ ph√¢n t√≠ch l·∫°i khi c·∫ßn thi·∫øt - khi `refTable` ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ho·∫∑c khi ƒë·ªëi t∆∞·ª£ng m·ªõi c√≥ ki·ªÉu kh√°c v·ªõi ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i.

Ph∆∞∆°ng th·ª©c `RefTable()` tr·∫£ v·ªÅ schema hi·ªán t·∫°i, k√®m theo c·∫£nh b√°o n·∫øu ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.

B√¢y gi·ªù ch√∫ng ta c√≥ th·ªÉ tri·ªÉn khai c√°c thao t√°c c∆° b·∫£n v·ªõi b·∫£ng d·ªØ li·ªáu:

```go
func (s *Session) CreateTable() error {
    table := s.RefTable()
    var columns []string
    for _, field := range table.Fields {
        columns = append(columns, fmt.Sprintf("%s %s %s", field.Name, field.Type, field.Tag))
    }
    desc := strings.Join(columns, ",")
    _, err := s.Raw(fmt.Sprintf("CREATE TABLE %s (%s);", table.Name, desc)).Exec()
    return err
}

func (s *Session) DropTable() error {
    _, err := s.Raw(fmt.Sprintf("DROP TABLE IF EXISTS %s", s.RefTable().Name)).Exec()
    return err
}

func (s *Session) HasTable() bool {
    sql, values := s.dialect.TableExistSQL(s.RefTable().Name)
    row := s.Raw(sql, values...).QueryRow()
    var tmp string
    _ = row.Scan(&tmp)
    return tmp == s.RefTable().Name
}
```

- `CreateTable()` t·∫°o b·∫£ng m·ªõi d·ª±a tr√™n schema, k·∫øt h·ª£p t√™n tr∆∞·ªùng, ki·ªÉu d·ªØ li·ªáu v√† c√°c r√†ng bu·ªôc
- `DropTable()` x√≥a b·∫£ng n·∫øu t·ªìn t·∫°i
- `HasTable()` ki·ªÉm tra xem b·∫£ng c√≥ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu kh√¥ng

ƒê·ªÉ ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c n√†y, ch√∫ng ta vi·∫øt test case:

```go
type User struct {
    Name string `geeorm:"PRIMARY KEY"`
    Age  int
}

func TestSession_CreateTable(t *testing.T) {
    s := NewSession().Model(&User{})
    _ = s.DropTable()
    _ = s.CreateTable()
    if !s.HasTable() {
        t.Fatal("Failed to create table User")
    }
}
```

## 4. Engine

C·∫•u tr√∫c Engine c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ h·ªó tr·ª£ Dialect, v√¨ constructor c·ªßa Session gi·ªù ƒë√¢y y√™u c·∫ßu th√™m tham s·ªë dialect.

```go
type Engine struct {
    db      *sql.DB
    dialect dialect.Dialect
}

func NewEngine(driver, source string) (e *Engine, err error) {
    // K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
    db, err := sql.Open(driver, source)
    if err != nil {
        log.Error(err)
        return
    }
    
    // Ki·ªÉm tra k·∫øt n·ªëi c√≤n s·ªëng kh√¥ng
    if err = db.Ping(); err != nil {
        log.Error(err)
        return
    }
    
    // L·∫•y dialect t∆∞∆°ng ·ª©ng v·ªõi driver
    dial, ok := dialect.GetDialect(driver)
    if !ok {
        log.Errorf("dialect %s Not Found", driver)
        return
    }
    
    // Kh·ªüi t·∫°o Engine v·ªõi db v√† dialect
    e = &Engine{db: db, dialect: dial}
    log.Info("Connect database success")
    return
}

func (engine *Engine) NewSession() *session.Session {
    return session.New(engine.db, engine.dialect)
}
```

Engine c√≥ hai nhi·ªám v·ª• ch√≠nh:
1. Trong h√†m `NewEngine`, l·∫•y dialect ph√π h·ª£p d·ª±a tr√™n t√™n driver
2. Trong h√†m `NewSession`, truy·ªÅn c·∫£ db v√† dialect v√†o constructor c·ªßa Session

## K·∫øt lu·∫≠n

Trong ph·∫ßn 2 n√†y, ch√∫ng ta ƒë√£ x√¢y d·ª±ng c√°c th√†nh ph·∫ßn c·ªët l√µi cho vi·ªác √°nh x·∫° ƒë·ªëi t∆∞·ª£ng v√†o b·∫£ng d·ªØ li·ªáu:

1) T·∫°o l·ªõp Dialect ƒë·ªÉ tr·ª´u t∆∞·ª£ng h√≥a s·ª± kh√°c bi·ªát gi·ªØa c√°c h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu, gi√∫p ORM framework c√≥ th·ªÉ ho·∫°t ƒë·ªông v·ªõi nhi·ªÅu lo·∫°i database kh√°c nhau.

2) S·ª≠ d·ª•ng reflection ƒë·ªÉ ph√¢n t√≠ch c·∫•u tr√∫c struct v√† chuy·ªÉn ƒë·ªïi th√†nh schema c∆° s·ªü d·ªØ li·ªáu, bao g·ªìm t√™n b·∫£ng, t√™n c·ªôt, ki·ªÉu d·ªØ li·ªáu v√† c√°c r√†ng bu·ªôc.

3) Tri·ªÉn khai c√°c thao t√°c qu·∫£n l√Ω b·∫£ng nh∆∞ t·∫°o, x√≥a v√† ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa b·∫£ng, ƒë·∫∑t n·ªÅn m√≥ng cho c√°c thao t√°c CRUD trong c√°c ph·∫ßn ti·∫øp theo.

