---
layout: post
title: 'Build your own X: T·ª± x√¢y d·ª±ng m·ªôt web framework v·ªõi Go - Ph·∫ßn 7'
date: '2025-05-26 22:30'
excerpt: >-
  B√†i cu·ªëi c√πng trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng web framework v·ªõi Go. T√¨m hi·ªÉu c√°ch tri·ªÉn khai c∆° ch·∫ø x·ª≠ l√Ω l·ªói (error handling) ƒë·ªÉ ngƒÉn ch·∫∑n ·ª©ng d·ª•ng b·ªã crash khi x·∫£y ra panic. Ho√†n thi·ªán framework Gee v·ªõi kh·∫£ nƒÉng ph·ª•c h·ªìi t·ª´ l·ªói v√† cung c·∫•p th√¥ng tin debug h·ªØu √≠ch.
comments: false
---

# Ph·∫ßn 7: X·ª≠ l√Ω l·ªói v√† ph·ª•c h·ªìi t·ª´ panic trong Gee Framework

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

B√†i vi·∫øt n√†y l√† ph·∫ßn th·ª© b·∫£y (c≈©ng l√† ph·∫ßn cu·ªëi c√πng) trong chu·ªói b√†i v·ªÅ vi·ªác x√¢y d·ª±ng web framework Gee t·ª´ ƒë·∫ßu b·∫±ng ng√¥n ng·ªØ Go.

## Tri·ªÉn khai c∆° ch·∫ø x·ª≠ l√Ω l·ªói

### panic

Trong Go, ph∆∞∆°ng ph√°p x·ª≠ l√Ω l·ªói ph·ªï bi·∫øn nh·∫•t l√† tr·∫£ v·ªÅ m·ªôt error, v√† ng∆∞·ªùi g·ªçi (caller) s·∫Ω quy·∫øt ƒë·ªãnh c√°ch x·ª≠ l√Ω sau ƒë√≥. ƒê√¢y l√† c√°ch ti·∫øp c·∫≠n ch√≠nh c·ªßa Go ƒë·ªëi v·ªõi h·∫ßu h·∫øt c√°c t√¨nh hu·ªëng l·ªói c√≥ th·ªÉ x·∫£y ra.
Tuy nhi√™n, ƒë·ªëi v·ªõi nh·ªØng l·ªói nghi√™m tr·ªçng kh√¥ng th·ªÉ kh√¥i ph·ª•c, Go cung c·∫•p c∆° ch·∫ø `panic`. Khi `panic` x·∫£y ra, ch∆∞∆°ng tr√¨nh s·∫Ω d·ª´ng th·ª±c thi ngay l·∫≠p t·ª©c.

C√≥ hai c√°ch ƒë·ªÉ `panic` x·∫£y ra:
1. Ch·ªß ƒë·ªông g·ªçi h√†m `panic()`
2. L·ªói runtime nh∆∞ truy c·∫≠p ngo√†i ph·∫°m vi m·∫£ng, chia cho 0, v.v.

V√≠ d·ª• v·ªÅ vi·ªác ch·ªß ƒë·ªông g·ªçi `panic`:

```go
// hello.go
func main() {
    fmt.Println("before panic")
    panic("crash")
    fmt.Println("after panic") // d√≤ng n√†y kh√¥ng bao gi·ªù ƒë∆∞·ª£c th·ª±c thi
}
```

K·∫øt qu·∫£:

```
$ go run hello.go

before panic
panic: crash

goroutine 1 [running]:
main.main()
        ~/go_demo/hello/hello.go:7 +0x95
exit status 2
```

V√≠ d·ª• v·ªÅ `panic` do l·ªói runtime:

```go
// hello.go
func main() {
    arr := []int{1, 2, 3}
    fmt.Println(arr[4]) // l·ªói: index out of range
}
```

K·∫øt qu·∫£:

```
$ go run hello.go
panic: runtime error: index out of range [4] with length 3
```

### defer

Khi `panic` x·∫£y ra, ch∆∞∆°ng tr√¨nh s·∫Ω d·ª´ng th·ª±c thi ngay l·∫≠p t·ª©c, nh∆∞ng tr∆∞·ªõc khi tho√°t ho√†n to√†n, Go s·∫Ω th·ª±c thi t·∫•t c·∫£ c√°c h√†m ƒë√£ ƒë∆∞·ª£c `defer` trong goroutine hi·ªán t·∫°i. ƒê√¢y l√† c∆° ch·∫ø quan tr·ªçng gi√∫p ch√∫ng ta c√≥ th·ªÉ d·ªçn d·∫πp t√†i nguy√™n ho·∫∑c x·ª≠ l√Ω l·ªói tr∆∞·ªõc khi ch∆∞∆°ng tr√¨nh k·∫øt th√∫c.

```go
// hello.go
func main() {
    defer func() {
        fmt.Println("defer func ƒë∆∞·ª£c g·ªçi")
    }()

    arr := []int{1, 2, 3}
    fmt.Println(arr[4])
}
```

K·∫øt qu·∫£:

```
$ go run hello.go 
defer func ƒë∆∞·ª£c g·ªçi
panic: runtime error: index out of range [4] with length 3
```

B·∫°n c√≥ th·ªÉ th·∫•y r·∫±ng m·∫∑c d√π c√≥ l·ªói, h√†m `defer` v·∫´n ƒë∆∞·ª£c th·ª±c thi tr∆∞·ªõc khi ch∆∞∆°ng tr√¨nh k·∫øt th√∫c. N·∫øu b·∫°n defer nhi·ªÅu t√°c v·ª• trong c√πng m·ªôt h√†m, ch√∫ng s·∫Ω ƒë∆∞·ª£c th·ª±c thi theo th·ª© t·ª± ng∆∞·ª£c l·∫°i, nghƒ©a l√† t√°c v·ª• defer cu·ªëi c√πng s·∫Ω ƒë∆∞·ª£c th·ª±c thi ƒë·∫ßu ti√™n.

### recover

Go cung c·∫•p h√†m `recover()` ƒë·ªÉ "b·∫Øt" v√† x·ª≠ l√Ω `panic`. H√†m n√†y ch·ªâ c√≥ t√°c d·ª•ng khi ƒë∆∞·ª£c g·ªçi trong m·ªôt h√†m `defer`. Khi `recover()` b·∫Øt ƒë∆∞·ª£c `panic`, ch∆∞∆°ng tr√¨nh s·∫Ω ti·∫øp t·ª•c th·ª±c thi b√¨nh th∆∞·ªùng thay v√¨ k·∫øt th√∫c.

```go
// hello.go
func test_recover() {
    defer func() {
        fmt.Println("defer func ƒë∆∞·ª£c g·ªçi")
        if err := recover(); err != nil {
            fmt.Println("ƒë√£ recover th√†nh c√¥ng:", err)
        }
    }()

    arr := []int{1, 2, 3}
    fmt.Println(arr[4])
    fmt.Println("sau panic") // d√≤ng n√†y kh√¥ng ƒë∆∞·ª£c th·ª±c thi
}

func main() {
    test_recover()
    fmt.Println("sau recover") // d√≤ng n√†y ƒë∆∞·ª£c th·ª±c thi v√¨ panic ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
}
```

K·∫øt qu·∫£:

```
$ go run hello.go 
defer func ƒë∆∞·ª£c g·ªçi
ƒë√£ recover th√†nh c√¥ng: runtime error: index out of range [4] with length 3
sau recover
```

Qua v√≠ d·ª• tr√™n, ch√∫ng ta th·∫•y:
1. Khi `panic` x·∫£y ra, lu·ªìng th·ª±c thi chuy·ªÉn ngay ƒë·∫øn h√†m `defer`
2. H√†m `recover()` b·∫Øt ƒë∆∞·ª£c l·ªói v√† ch∆∞∆°ng tr√¨nh ti·∫øp t·ª•c th·ª±c thi
3. D√≤ng "sau panic" kh√¥ng ƒë∆∞·ª£c in ra v√¨ n√≥ n·∫±m sau ƒëi·ªÉm `panic`
4. D√≤ng "sau recover" ƒë∆∞·ª£c in ra v√¨ ch∆∞∆°ng tr√¨nh ƒë√£ ph·ª•c h·ªìi v√† ti·∫øp t·ª•c th·ª±c thi

## C∆° ch·∫ø x·ª≠ l√Ω l·ªói trong Gee

ƒê·ªëi v·ªõi m·ªôt web framework, vi·ªác x·ª≠ l√Ω l·ªói l√† v√¥ c√πng quan tr·ªçng. N·∫øu kh√¥ng c√≥ c∆° ch·∫ø x·ª≠ l√Ω l·ªói ph√π h·ª£p, m·ªôt l·ªói nh·ªè trong handler c√≥ th·ªÉ l√†m crash to√†n b·ªô server, khi·∫øn t·∫•t c·∫£ c√°c request kh√°c kh√¥ng ƒë∆∞·ª£c ph·ª•c v·ª•.

V√≠ d·ª•, xem x√©t ƒëo·∫°n code sau:

```go
func main() {
    r := gee.New()
    r.GET("/panic", func(c *gee.Context) {
        names := []string{"geektutu"}
        c.String(http.StatusOK, names[100]) // l·ªói: index out of range
    })
    r.Run(":9999")
}
```

N·∫øu ng∆∞·ªùi d√πng truy c·∫≠p `/panic`, handler s·∫Ω g√¢y ra l·ªói khi c·ªë g·∫Øng truy c·∫≠p ph·∫ßn t·ª≠ th·ª© 100 c·ªßa m·∫£ng ch·ªâ c√≥ 1 ph·∫ßn t·ª≠. N·∫øu kh√¥ng c√≥ c∆° ch·∫ø x·ª≠ l√Ω l·ªói, server c√≥ th·ªÉ b·ªã crash.

> **L∆∞u √Ω quan tr·ªçng**: Th·ª±c t·∫ø, ngay c·∫£ khi kh√¥ng c√≥ middleware Recovery, th∆∞ vi·ªán chu·∫©n `net/http` c·ªßa Go ƒë√£ c√≥ c∆° ch·∫ø x·ª≠ l√Ω panic c∆° b·∫£n, n√™n server kh√¥ng ho√†n to√†n b·ªã crash. Tuy nhi√™n, request g√¢y ra panic s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, v√† kh√¥ng c√≥ th√¥ng tin h·ªØu √≠ch n√†o ƒë∆∞·ª£c ghi l·∫°i ƒë·ªÉ debug.

ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y, ch√∫ng ta s·∫Ω tri·ªÉn khai m·ªôt middleware `Recovery` ƒë∆°n gi·∫£n nh∆∞ng hi·ªáu qu·∫£. Middleware n√†y s·∫Ω:
1. B·∫Øt t·∫•t c·∫£ c√°c panic x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω request
2. Ghi log chi ti·∫øt v·ªÅ l·ªói v√† stack trace ƒë·ªÉ d·ªÖ d√†ng debug
3. Tr·∫£ v·ªÅ ph·∫£n h·ªìi "Internal Server Error" cho client thay v√¨ ƒë·ªÉ k·∫øt n·ªëi b·ªã ƒë√≥ng

Ch√∫ng ta s·∫Ω t·∫≠n d·ª•ng c∆° ch·∫ø middleware ƒë√£ tri·ªÉn khai tr∆∞·ªõc ƒë√≥ ƒë·ªÉ th√™m t√≠nh nƒÉng x·ª≠ l√Ω l·ªói v√†o framework Gee.

### Tri·ªÉn khai middleware Recovery

Th√™m file m·ªõi `gee/recovery.go` v·ªõi n·ªôi dung sau:

```go
func Recovery() HandlerFunc {
    return func(c *Context) {
        defer func() {
            if err := recover(); err != nil {
                message := fmt.Sprintf("%s", err)
                log.Printf("%s\n\n", trace(message))
                c.Fail(http.StatusInternalServerError, "Internal Server Error")
            }
        }()

        c.Next()
    }
}
```

Middleware `Recovery` ho·∫°t ƒë·ªông r·∫•t ƒë∆°n gi·∫£n:
1. S·ª≠ d·ª•ng `defer` ƒë·ªÉ ƒë·∫£m b·∫£o h√†m ph·ª•c h·ªìi ƒë∆∞·ª£c g·ªçi ngay c·∫£ khi c√≥ panic
2. Trong h√†m defer, g·ªçi `recover()` ƒë·ªÉ b·∫Øt panic (n·∫øu c√≥)
3. N·∫øu c√≥ panic, ghi log th√¥ng tin l·ªói v√† stack trace
4. Tr·∫£ v·ªÅ m√£ l·ªói 500 (Internal Server Error) cho client

H√†m `trace()` ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ stack trace:

```go
// print stack trace for debug
func trace(message string) string {
    var pcs [32]uintptr
    n := runtime.Callers(3, pcs[:]) // b·ªè qua 3 caller ƒë·∫ßu ti√™n

    var str strings.Builder
    str.WriteString(message + "\nTraceback:")
    for _, pc := range pcs[:n] {
        fn := runtime.FuncForPC(pc)
        file, line := fn.FileLine(pc)
        str.WriteString(fmt.Sprintf("\n\t%s:%d", file, line))
    }
    return str.String()
}
```

H√†m `trace()` s·ª≠ d·ª•ng c√°c h√†m t·ª´ package `runtime` ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ call stack:
1. `runtime.Callers(3, pcs[:])` l·∫•y danh s√°ch c√°c program counter trong call stack, b·ªè qua 3 caller ƒë·∫ßu ti√™n (b·∫£n th√¢n h√†m Callers, h√†m trace, v√† h√†m defer)
2. V·ªõi m·ªói program counter, l·∫•y th√¥ng tin v·ªÅ h√†m, file v√† s·ªë d√≤ng t∆∞∆°ng ·ª©ng
3. T·∫°o chu·ªói th√¥ng tin chi ti·∫øt v·ªÅ stack trace

V·ªõi middleware `Recovery` n√†y, framework Gee c·ªßa ch√∫ng ta ƒë√£ c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω l·ªói c∆° b·∫£n, gi√∫p server ti·∫øp t·ª•c ho·∫°t ƒë·ªông ngay c·∫£ khi c√≥ panic x·∫£y ra.

### T√≠ch h·ª£p Recovery v√†o Engine m·∫∑c ƒë·ªãnh

ƒê·ªÉ thu·∫≠n ti·ªán cho ng∆∞·ªùi d√πng, ch√∫ng ta th√™m h√†m `Default()` v√†o `gee.go` ƒë·ªÉ t·∫°o m·ªôt Engine v·ªõi c√°c middleware c∆° b·∫£n ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn:

```go
// gee.go
// Default use Logger() & Recovery middlewares
func Default() *Engine {
    engine := New()
    engine.Use(Logger(), Recovery())
    return engine
}
```

V·ªõi h√†m n√†y, ng∆∞·ªùi d√πng c√≥ th·ªÉ d·ªÖ d√†ng t·∫°o m·ªôt Engine v·ªõi middleware `Logger` v√† `Recovery` ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn:

```go
r := gee.Default() // thay v√¨ r := gee.New()
```

## Demo s·ª≠ d·ª•ng

H√£y th·ª≠ nghi·ªám middleware `Recovery` v·ªõi m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n:

```go
package main

import (
    "net/http"

    "gee"
)

func main() {
    r := gee.Default() // s·ª≠ d·ª•ng Engine v·ªõi Logger v√† Recovery
    r.GET("/", func(c *gee.Context) {
        c.String(http.StatusOK, "Hello Geektutu\n")
    })
    // c·ªë t√¨nh t·∫°o l·ªói ƒë·ªÉ test Recovery
    r.GET("/panic", func(c *gee.Context) {
        names := []string{"geektutu"}
        c.String(http.StatusOK, names[100])
    })

    r.Run(":9999")
}
```

Khi ch·∫°y ·ª©ng d·ª•ng v√† th·ª≠ nghi·ªám c√°c endpoint:

```
$ curl "http://localhost:9999"
Hello Geektutu
$ curl "http://localhost:9999/panic"
{"message":"Internal Server Error"}
$ curl "http://localhost:9999"
Hello Geektutu
```

Ch√∫ng ta th·∫•y r·∫±ng:
1. Endpoint `/` ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
2. Khi truy c·∫≠p `/panic`, m·∫∑c d√π c√≥ l·ªói nh∆∞ng server v·∫´n tr·∫£ v·ªÅ ph·∫£n h·ªìi "Internal Server Error"
3. Sau khi x·∫£y ra l·ªói, server v·∫´n ti·∫øp t·ª•c ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng, c√≥ th·ªÉ ph·ª•c v·ª• c√°c request ti·∫øp theo

Trong log c·ªßa server, ch√∫ng ta s·∫Ω th·∫•y th√¥ng tin chi ti·∫øt v·ªÅ l·ªói:

```
2020/01/09 01:00:10 Route  GET - /
2020/01/09 01:00:10 Route  GET - /panic
2020/01/09 01:00:22 [200] / in 25.364¬µs
2020/01/09 01:00:32 runtime error: index out of range
Traceback:
        /usr/local/Cellar/go/1.12.5/libexec/src/runtime/panic.go:523
        /usr/local/Cellar/go/1.12.5/libexec/src/runtime/panic.go:44
        /tmp/7days-golang/day7-panic-recover/main.go:47
        /tmp/7days-golang/day7-panic-recover/gee/context.go:41
        /tmp/7days-golang/day7-panic-recover/gee/recovery.go:37
        /tmp/7days-golang/day7-panic-recover/gee/context.go:41
        /tmp/7days-golang/day7-panic-recover/gee/logger.go:15
        /tmp/7days-golang/day7-panic-recover/gee/context.go:41
        /tmp/7days-golang/day7-panic-recover/gee/router.go:99
        /tmp/7days-golang/day7-panic-recover/gee/gee.go:130
        /usr/local/Cellar/go/1.12.5/libexec/src/net/http/server.go:2775
        /usr/local/Cellar/go/1.12.5/libexec/src/net/http/server.go:1879
        /usr/local/Cellar/go/1.12.5/libexec/src/runtime/asm_amd64.s:1338

2020/01/09 01:00:32 [500] /panic in 395.846¬µs
2020/01/09 01:00:38 [200] / in 6.985¬µs
```

Th√¥ng tin n√†y r·∫•t h·ªØu √≠ch cho vi·ªác debug, gi√∫p ch√∫ng ta d·ªÖ d√†ng x√°c ƒë·ªãnh nguy√™n nh√¢n v√† v·ªã tr√≠ c·ªßa l·ªói.

## Gi·∫£i th√≠ch v·ªÅ c∆° ch·∫ø x·ª≠ l√Ω panic trong Go web server

C√≥ m·ªôt ƒëi·ªÉm c·∫ßn l√†m r√µ: Ngay c·∫£ khi kh√¥ng c√≥ middleware `Recovery`, th∆∞ vi·ªán chu·∫©n `net/http` c·ªßa Go ƒë√£ c√≥ c∆° ch·∫ø x·ª≠ l√Ω panic c∆° b·∫£n. Khi m·ªôt panic x·∫£y ra trong handler, Go s·∫Ω b·∫Øt panic ƒë√≥ v√† ƒë√≥ng k·∫øt n·ªëi hi·ªán t·∫°i, nh∆∞ng server v·∫´n ti·∫øp t·ª•c ch·∫°y v√† ph·ª•c v·ª• c√°c request kh√°c.

Tuy nhi√™n, c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ v·ªõi c∆° ch·∫ø m·∫∑c ƒë·ªãnh n√†y:
1. Client s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi g√¨ c·∫£ (k·∫øt n·ªëi b·ªã ƒë√≥ng)
2. Kh√¥ng c√≥ th√¥ng tin h·ªØu √≠ch n√†o ƒë∆∞·ª£c ghi l·∫°i ƒë·ªÉ debug

Middleware `Recovery` c·ªßa ch√∫ng ta gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ n√†y b·∫±ng c√°ch:
1. B·∫Øt panic v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi "Internal Server Error" cho client
2. Ghi log chi ti·∫øt v·ªÅ l·ªói v√† stack trace
3. Cho ph√©p server ti·∫øp t·ª•c ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng

ƒê√¢y l√† l√Ω do t·∫°i sao h·∫ßu h·∫øt c√°c web framework ƒë·ªÅu cung c·∫•p middleware x·ª≠ l√Ω l·ªói t∆∞∆°ng t·ª±.

Bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y minh h·ªça c√°ch middleware Recovery ho·∫°t ƒë·ªông trong framework Gee:

```mermaid
sequenceDiagram
    participant Client as Client
    participant Server as HTTP Server
    participant Recovery as Recovery Middleware
    participant Handler as Route Handler
    
    Client->>Server: HTTP Request
    Server->>Recovery: X·ª≠ l√Ω request
    
    Recovery->>Handler: c.Next()
    
    alt Kh√¥ng c√≥ l·ªói
        Handler->>Recovery: Tr·∫£ v·ªÅ k·∫øt qu·∫£ b√¨nh th∆∞·ªùng
        Recovery->>Client: HTTP Response
    else X·∫£y ra panic
        Handler--xRecovery: panic!
        Note over Recovery: defer func() ƒë∆∞·ª£c g·ªçi
        Recovery->>Recovery: recover()
        Recovery->>Recovery: log stack trace
        Recovery->>Client: 500 Internal Server Error
    end
    
    Note over Server: Server ti·∫øp t·ª•c ho·∫°t ƒë·ªông
    Client->>Server: Request ti·∫øp theo
```

**Gi·∫£i th√≠ch bi·ªÉu ƒë·ªì:**

1. Client g·ª≠i HTTP request ƒë·∫øn server
2. Server chuy·ªÉn request ƒë·∫øn middleware Recovery
3. Recovery g·ªçi handler ti·∫øp theo trong chu·ªói middleware
4. N·∫øu handler x·ª≠ l√Ω b√¨nh th∆∞·ªùng:
   - K·∫øt qu·∫£ ƒë∆∞·ª£c tr·∫£ v·ªÅ cho client
5. N·∫øu handler g√¢y ra panic:
   - H√†m defer trong Recovery ƒë∆∞·ª£c k√≠ch ho·∫°t
   - Recovery g·ªçi recover() ƒë·ªÉ b·∫Øt panic
   - Recovery ghi log th√¥ng tin l·ªói v√† stack trace
   - Recovery tr·∫£ v·ªÅ m√£ l·ªói 500 cho client
6. Server v·∫´n ti·∫øp t·ª•c ho·∫°t ƒë·ªông v√† c√≥ th·ªÉ x·ª≠ l√Ω c√°c request ti·∫øp theo

## T·ªïng k·∫øt chu·ªói b√†i vi·∫øt

Qua 7 ph·∫ßn c·ªßa chu·ªói b√†i vi·∫øt n√†y, ch√∫ng ta ƒë√£ x√¢y d·ª±ng th√†nh c√¥ng m·ªôt web framework ƒë∆°n gi·∫£n nh∆∞ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng. H√£y nh√¨n l·∫°i nh·ªØng g√¨ ch√∫ng ta ƒë√£ h·ªçc ƒë∆∞·ª£c:

### Ph·∫ßn 1: HTTP Handler c∆° b·∫£n
- T√¨m hi·ªÉu v·ªÅ interface `http.Handler` v√† c√°ch Go x·ª≠ l√Ω HTTP request
- X√¢y d·ª±ng router ƒë∆°n gi·∫£n ƒë·ªÉ ƒë·ªãnh tuy·∫øn request ƒë·∫øn c√°c handler t∆∞∆°ng ·ª©ng

### Ph·∫ßn 2: Context
- Thi·∫øt k·∫ø struct `Context` ƒë·ªÉ ƒë√≥ng g√≥i th√¥ng tin request/response
- Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ti·ªán √≠ch ƒë·ªÉ x·ª≠ l√Ω request v√† tr·∫£ v·ªÅ response

### Ph·∫ßn 3: Router ƒë·ªông
- Tri·ªÉn khai trie tree ƒë·ªÉ h·ªó tr·ª£ c√°c route ƒë·ªông nh∆∞ `/user/:name`
- X·ª≠ l√Ω c√°c tham s·ªë trong URL v√† truy·ªÅn ch√∫ng v√†o Context

### Ph·∫ßn 4: Nh√≥m route
- T·ªï ch·ª©c c√°c route th√†nh c√°c nh√≥m ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
- H·ªó tr·ª£ c√°c route l·ªìng nhau v√† prefix chung

### Ph·∫ßn 5: Middleware
- Thi·∫øt k·∫ø c∆° ch·∫ø middleware ƒë·ªÉ m·ªü r·ªông ch·ª©c nƒÉng c·ªßa framework
- Tri·ªÉn khai middleware Logger ƒë·ªÉ ghi log th√¥ng tin request

### Ph·∫ßn 6: Template
- H·ªó tr·ª£ render HTML template
- Ph·ª•c v·ª• t√†i nguy√™n tƒ©nh nh∆∞ CSS, JavaScript, h√¨nh ·∫£nh

### Ph·∫ßn 7: X·ª≠ l√Ω l·ªói
- Tri·ªÉn khai middleware Recovery ƒë·ªÉ b·∫Øt v√† x·ª≠ l√Ω panic
- Ghi log th√¥ng tin l·ªói chi ti·∫øt ƒë·ªÉ d·ªÖ d√†ng debug

Framework Gee m√† ch√∫ng ta ƒë√£ x√¢y d·ª±ng c√≥ th·ªÉ kh√¥ng ƒë·ªß m·∫°nh m·∫Ω ƒë·ªÉ s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng production, nh∆∞ng n√≥ ƒë√£ th·ªÉ hi·ªán ƒë∆∞·ª£c nh·ªØng nguy√™n l√Ω c·ªët l√µi ƒë·∫±ng sau c√°c web framework ph·ªï bi·∫øn nh∆∞ Gin, Echo hay Fiber. Th√¥ng qua vi·ªác x√¢y d·ª±ng Gee, ch√∫ng ta ƒë√£ hi·ªÉu s√¢u h∆°n v·ªÅ c√°ch m·ªôt web framework ho·∫°t ƒë·ªông, v√† c√≥ th·ªÉ √°p d·ª•ng ki·∫øn th·ª©c n√†y khi s·ª≠ d·ª•ng c√°c framework kh√°c.

Hy v·ªçng chu·ªói b√†i vi·∫øt n√†y ƒë√£ mang l·∫°i cho b·∫°n nh·ªØng ki·∫øn th·ª©c b·ªï √≠ch v√† c·∫£m h·ª©ng ƒë·ªÉ ti·∫øp t·ª•c kh√°m ph√° th·∫ø gi·ªõi web development v·ªõi Go!