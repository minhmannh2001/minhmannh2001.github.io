---
layout: post
title: 'Build your own X: T·ª± x√¢y d·ª±ng m·ªôt web framework v·ªõi Go - Ph·∫ßn 4'
date: '2025-05-20 21:26'
excerpt: >-
  Ph·∫ßn 4 trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng web framework v·ªõi Go. Trong b√†i n√†y, ch√∫ng ta s·∫Ω tri·ªÉn khai Route Group Control - m·ªôt t√≠nh nƒÉng quan tr·ªçng gi√∫p nh√≥m c√°c route l·∫°i v·ªõi nhau, h·ªó tr·ª£ nh√≥m l·ªìng nhau v√† t·∫°o n·ªÅn t·∫£ng cho vi·ªác √°p d·ª•ng middleware.
comments: false
---

# Ph·∫ßn 4: Tri·ªÉn khai Route Group Control trong Gee Framework

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

ƒê√¢y l√† b√†i vi·∫øt th·ª© t∆∞ trong lo·∫°t b√†i h∆∞·ªõng d·∫´n x√¢y d·ª±ng web framework Gee t·ª´ ƒë·∫ßu b·∫±ng Go trong 7 ng√†y.

## T·∫°i sao c·∫ßn Route Group Control?

Route Group Control l√† m·ªôt t√≠nh nƒÉng c∆° b·∫£n m√† m·ªçi web framework c·∫ßn c√≥. N√≥ cho ph√©p ch√∫ng ta nh√≥m c√°c route c√≥ ƒëi·ªÉm chung l·∫°i v·ªõi nhau, gi√∫p qu·∫£n l√Ω code d·ªÖ d√†ng h∆°n. Trong th·ª±c t·∫ø, nhi·ªÅu route th∆∞·ªùng c·∫ßn x·ª≠ l√Ω t∆∞∆°ng t·ª± nhau, v√≠ d·ª•:

- C√°c route b·∫Øt ƒë·∫ßu b·∫±ng `/post` cho ph√©p truy c·∫≠p ·∫©n danh
- C√°c route b·∫Øt ƒë·∫ßu b·∫±ng `/admin` y√™u c·∫ßu x√°c th·ª±c ng∆∞·ªùi d√πng
- C√°c route b·∫Øt ƒë·∫ßu b·∫±ng `/api` l√† c√°c RESTful API cho b√™n th·ª© ba, c·∫ßn x√°c th·ª±c ri√™ng

Vi·ªác nh√≥m c√°c route l·∫°i kh√¥ng ch·ªâ gi√∫p code g·ªçn g√†ng h∆°n m√† c√≤n t·∫°o n·ªÅn t·∫£ng cho vi·ªác √°p d·ª•ng middleware - m·ªôt t√≠nh nƒÉng m·∫°nh m·∫Ω m√† ch√∫ng ta s·∫Ω t√¨m hi·ªÉu trong b√†i ti·∫øp theo.

## Nh√≥m l·ªìng nhau (Nested Groups)

Route Group th∆∞·ªùng ƒë∆∞·ª£c ph√¢n bi·ªát b·∫±ng ti·ªÅn t·ªë (prefix) chung. Framework c·ªßa ch√∫ng ta s·∫Ω h·ªó tr·ª£:

- Ph√¢n nh√≥m theo ti·ªÅn t·ªë
- H·ªó tr·ª£ nh√≥m l·ªìng nhau (nested groups)
- Middleware c√≥ th·ªÉ √°p d·ª•ng cho c·∫£ nh√≥m v√† nh√≥m con

V√≠ d·ª• v·ªÅ nh√≥m l·ªìng nhau:
- `/post` l√† m·ªôt nh√≥m
- `/post/a` v√† `/post/b` l√† c√°c nh√≥m con c·ªßa `/post`
- Middleware √°p d·ª•ng cho nh√≥m `/post` s·∫Ω t·ª± ƒë·ªông √°p d·ª•ng cho c√°c nh√≥m con
- M·ªói nh√≥m con v·∫´n c√≥ th·ªÉ c√≥ middleware ri√™ng

## Thi·∫øt k·∫ø c·∫•u tr√∫c Group

M·ªôt ƒë·ªëi t∆∞·ª£ng Group c·∫ßn c√≥ nh·ªØng thu·ªôc t√≠nh sau:

```go
// RouterGroup l√† c·∫•u tr√∫c ƒë·ªÉ qu·∫£n l√Ω c√°c nh√≥m route
type RouterGroup struct {
    prefix      string           // ti·ªÅn t·ªë c·ªßa nh√≥m route
    middlewares []HandlerFunc    // danh s√°ch middleware c·ªßa nh√≥m
    parent      *RouterGroup     // tham chi·∫øu ƒë·∫øn nh√≥m cha (h·ªó tr·ª£ nh√≥m l·ªìng nhau)
    engine      *Engine          // tham chi·∫øu ƒë·∫øn Engine ch√≠nh
}
```

Ch√∫ng ta s·∫Ω thi·∫øt k·∫ø `Engine` l√† nh√≥m cao nh·∫•t, k·∫ø th·ª´a t·∫•t c·∫£ kh·∫£ nƒÉng c·ªßa `RouterGroup`:

```go
// Engine l√† c·∫•u tr√∫c ch√≠nh c·ªßa framework
type Engine struct {
    *RouterGroup            // Engine k·∫ø th·ª´a c√°c ph∆∞∆°ng th·ª©c c·ªßa RouterGroup
    router      *router     // b·ªô ƒë·ªãnh tuy·∫øn
    groups      []*RouterGroup  // l∆∞u tr·ªØ t·∫•t c·∫£ c√°c nh√≥m
}
```

V·ªõi thi·∫øt k·∫ø n√†y, ch√∫ng ta c√≥ th·ªÉ tri·ªÉn khai t·∫•t c·∫£ c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn ƒë·ªãnh tuy·∫øn trong `RouterGroup`. D∆∞·ªõi ƒë√¢y l√† c√°ch tri·ªÉn khai:

```go
// H√†m kh·ªüi t·∫°o Engine
func New() *Engine {
    engine := &Engine{router: newRouter()}
    engine.RouterGroup = &RouterGroup{engine: engine}
    engine.groups = []*RouterGroup{engine.RouterGroup}
    return engine
}

// T·∫°o nh√≥m m·ªõi t·ª´ nh√≥m hi·ªán t·∫°i
func (group *RouterGroup) Group(prefix string) *RouterGroup {
    engine := group.engine
    newGroup := &RouterGroup{
        prefix: group.prefix + prefix,
        parent: group,
        engine: engine,
    }
    engine.groups = append(engine.groups, newGroup)
    return newGroup
}

// Th√™m route v√†o nh√≥m
func (group *RouterGroup) addRoute(method string, comp string, handler HandlerFunc) {
    pattern := group.prefix + comp
    log.Printf("Route %4s - %s", method, pattern)
    group.engine.router.addRoute(method, pattern, handler)
}

// ƒê·ªãnh nghƒ©a ph∆∞∆°ng th·ª©c GET
func (group *RouterGroup) GET(pattern string, handler HandlerFunc) {
    group.addRoute("GET", pattern, handler)
}

// ƒê·ªãnh nghƒ©a ph∆∞∆°ng th·ª©c POST
func (group *RouterGroup) POST(pattern string, handler HandlerFunc) {
    group.addRoute("POST", pattern, handler)
}
```

H√£y ch√∫ √Ω ƒë·∫øn h√†m `addRoute`: n√≥ g·ªçi `group.engine.router.addRoute` ƒë·ªÉ th·ª±c hi·ªán vi·ªác √°nh x·∫° route. V√¨ `Engine` k·∫ø th·ª´a t·∫•t c·∫£ thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c c·ªßa `RouterGroup`, n√™n `(*Engine).engine` tr·ªè ƒë·∫øn ch√≠nh n√≥. V·ªõi c√°ch thi·∫øt k·∫ø n√†y, ch√∫ng ta c√≥ th·ªÉ th√™m route nh∆∞ tr∆∞·ªõc ƒë√¢y, ho·∫∑c th√™m route theo nh√≥m.

## C√°ch s·ª≠ d·ª•ng

```go
func main() {
    r := gee.New()

    // Route ƒë∆°n l·∫ª
    r.GET("/index", func(c *gee.Context) {
        c.HTML(http.StatusOK, "<h1>Index Page</h1>")
    })

    // Nh√≥m v1
    v1 := r.Group("/v1")
    {
        v1.GET("/", func(c *gee.Context) {
            c.HTML(http.StatusOK, "<h1>Hello Gee</h1>")
        })

        v1.GET("/hello", func(c *gee.Context) {
            c.String(http.StatusOK, "hello %s, you're at %s\n",
                c.Query("name"), c.Path)
        })
    }

    // Nh√≥m v2
    v2 := r.Group("/v2")
    {
        v2.GET("/hello/:name", func(c *gee.Context) {
            c.String(http.StatusOK, "hello %s, you're at %s\n",
                c.Param("name"), c.Path)
        })

        v2.POST("/login", func(c *gee.Context) {
            c.JSON(http.StatusOK, gee.H{
                "username": c.PostForm("username"),
                "password": c.PostForm("password"),
            })
        })
    }

    r.Run(":9999")
}
```

## Ki·ªÉm th·ª≠

Sau khi tri·ªÉn khai xong, ch√∫ng ta c√≥ th·ªÉ ki·ªÉm th·ª≠ c√°c route b·∫±ng `curl`:

```bash
# Ki·ªÉm tra route v1
$ curl "http://localhost:9999/v1/hello?name=geektutu"
hello geektutu, you're at /v1/hello

# Ki·ªÉm tra route v2
$ curl "http://localhost:9999/v2/hello/geektutu"
hello geektutu, you're at /v2/hello/geektutu
```

## T·ªïng k·∫øt

V·ªõi Route Group Control, ch√∫ng ta ƒë√£ ƒë·∫°t ƒë∆∞·ª£c nh·ªØng l·ª£i √≠ch sau:

1. **T·ªï ch·ª©c code t·ªët h∆°n**: Nh√≥m c√°c route c√≥ li√™n quan v·ªõi nhau
2. **D·ªÖ b·∫£o tr√¨**: Khi c·∫ßn thay ƒë·ªïi logic cho m·ªôt nh√≥m route, ch·ªâ c·∫ßn s·ª≠a ·ªü m·ªôt n∆°i
3. **Chu·∫©n b·ªã cho middleware**: T·∫°o n·ªÅn t·∫£ng ƒë·ªÉ √°p d·ª•ng middleware cho c·∫£ nh√≥m route
4. **H·ªó tr·ª£ nh√≥m l·ªìng nhau**: Cho ph√©p t·ªï ch·ª©c route theo c·∫•u tr√∫c ph√¢n c·∫•p

Trong b√†i ti·∫øp theo (Ph·∫ßn 5), ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ middleware - m·ªôt t√≠nh nƒÉng m·∫°nh m·∫Ω gi√∫p th√™m c√°c ch·ª©c nƒÉng m·ªõi cho framework m√† kh√¥ng c·∫ßn thay ƒë·ªïi c·∫•u tr√∫c ch√≠nh c·ªßa h·ªá th·ªëng.

