---
layout: post
title: 'Build your own X: T·ª± x√¢y d·ª±ng m·ªôt ORM framework v·ªõi Go - Ph·∫ßn 1: C∆° b·∫£n v·ªÅ Database/SQL'
date: '2025-06-02 14:30'
excerpt: >-
  Ph·∫ßn 1 trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng ORM framework v·ªõi Go. B√†i vi·∫øt n√†y t·∫≠p trung v√†o vi·ªác t√¨m hi·ªÉu c∆° b·∫£n v·ªÅ SQLite, s·ª≠ d·ª•ng th∆∞ vi·ªán database/sql c·ªßa Go v√† x√¢y d·ª±ng c·∫•u tr√∫c c∆° b·∫£n cho framework ORM.
comments: false
---

# Ph·∫ßn 1: C∆° b·∫£n v·ªÅ Database/SQL trong GeeORM

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

ƒê√¢y l√† b√†i vi·∫øt ƒë·∫ßu ti√™n trong lo·∫°t b√†i h∆∞·ªõng d·∫´n x√¢y d·ª±ng ORM framework GeeORM t·ª´ ƒë·∫ßu b·∫±ng Go trong 7 ng√†y.

## M·ª•c ti√™u c·ªßa b√†i vi·∫øt n√†y

- T√¨m hi·ªÉu c√°c thao t√°c c∆° b·∫£n v·ªõi SQLite (k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu, t·∫°o b·∫£ng, th√™m v√† x√≥a b·∫£n ghi, v.v.)
- S·ª≠ d·ª•ng th∆∞ vi·ªán chu·∫©n database/sql c·ªßa Go ƒë·ªÉ k·∫øt n·ªëi v√† thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu SQLite
- X√¢y d·ª±ng c·∫•u tr√∫c c∆° b·∫£n cho framework ORM

## 1. Gi·ªõi thi·ªáu v·ªÅ SQLite

> SQLite l√† m·ªôt th∆∞ vi·ªán vi·∫øt b·∫±ng C, tri·ªÉn khai m·ªôt c∆° s·ªü d·ªØ li·ªáu SQL nh·ªè g·ªçn, nhanh, ƒë·ªôc l·∫≠p, ƒë√°ng tin c·∫≠y v√† ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.
> ‚Äì Trang web ch√≠nh th·ª©c c·ªßa SQLite

### ƒê·∫∑c ƒëi·ªÉm c·ªßa SQLite

SQLite l√† m·ªôt h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu quan h·ªá nh·ªè g·ªçn, tu√¢n th·ªß ƒë·∫ßy ƒë·ªß c√°c nguy√™n t·∫Øc ACID (Atomicity, Consistency, Isolation, Durability). ƒêi·ªÉm kh√°c bi·ªát ch√≠nh so v·ªõi MySQL v√† PostgreSQL l√† SQLite kh√¥ng ho·∫°t ƒë·ªông theo m√¥ h√¨nh client/server - thay v√†o ƒë√≥, n√≥ ƒë∆∞·ª£c t√≠ch h·ª£p tr·ª±c ti·∫øp v√†o ·ª©ng d·ª•ng c·ªßa b·∫°n. To√†n b·ªô c∆° s·ªü d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ trong m·ªôt t·ªáp duy nh·∫•t, gi√∫p vi·ªác tri·ªÉn khai v√† qu·∫£n l√Ω tr·ªü n√™n ƒë∆°n gi·∫£n.

V·ªõi ƒë·∫∑c t√≠nh nh·∫π nh√†ng v√† d·ªÖ s·ª≠ d·ª•ng, SQLite l√† l·ª±a ch·ªçn l√Ω t∆∞·ªüng cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc v·ªÅ c∆° s·ªü d·ªØ li·ªáu quan h·ªá. ƒê√¢y c≈©ng l√† l√Ω do ch√∫ng ta ch·ªçn SQLite l√†m n·ªÅn t·∫£ng cho to√†n b·ªô qu√° tr√¨nh ph√°t tri·ªÉn v√† ki·ªÉm th·ª≠ GeeORM.

### C√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng c∆° b·∫£n

Tr√™n Ubuntu, vi·ªác c√†i ƒë·∫∑t SQLite ch·ªâ c·∫ßn m·ªôt d√≤ng l·ªánh ƒë∆°n gi·∫£n:

```bash
apt-get install sqlite3
```

Sau khi c√†i ƒë·∫∑t, b·∫°n c√≥ th·ªÉ k·∫øt n·ªëi ƒë·∫øn m·ªôt c∆° s·ªü d·ªØ li·ªáu b·∫±ng l·ªánh `sqlite3` theo sau l√† t√™n t·ªáp c∆° s·ªü d·ªØ li·ªáu. N·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i, SQLite s·∫Ω t·ª± ƒë·ªông t·∫°o m·ªõi:

```bash
> sqlite3 gee.db
SQLite version 3.22.0 2018-01-22 18:45:57
Enter ".help" for usage hints.
sqlite>
```

### C√°c thao t√°c c∆° b·∫£n v·ªõi SQLite

B√¢y gi·ªù ch√∫ng ta s·∫Ω th·ª±c hi·ªán m·ªôt s·ªë thao t√°c c∆° b·∫£n v·ªõi SQLite ƒë·ªÉ l√†m quen v·ªõi c√∫ ph√°p c·ªßa n√≥:

1. **T·∫°o b·∫£ng m·ªõi**: T·∫°o b·∫£ng `User` v·ªõi hai tr∆∞·ªùng - `Name` (ki·ªÉu text) v√† `Age` (ki·ªÉu integer)

```sql
sqlite> CREATE TABLE User(Name text, Age integer);
```

2. **Th√™m d·ªØ li·ªáu**: Ch√®n hai b·∫£n ghi v√†o b·∫£ng `User`

```sql
sqlite> INSERT INTO User(Name, Age) VALUES ("Tom", 18), ("Jack", 25);
```

3. **Truy v·∫•n d·ªØ li·ªáu**: ƒê·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ truy v·∫•n r√µ r√†ng h∆°n, tr∆∞·ªõc ti√™n b·∫≠t hi·ªÉn th·ªã t√™n c·ªôt

```sql
sqlite> .head on

# T√¨m ng∆∞·ªùi d√πng c√≥ tu·ªïi l·ªõn h∆°n 20
sqlite> SELECT * FROM User WHERE Age > 20;
Name|Age
Jack|25

# ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
sqlite> SELECT COUNT(*) FROM User;
COUNT(*)
2
```

4. **Xem th√¥ng tin c·∫•u tr√∫c**: SQLite cung c·∫•p c√°c l·ªánh ƒë·∫∑c bi·ªát ƒë·ªÉ xem th√¥ng tin v·ªÅ c∆° s·ªü d·ªØ li·ªáu

```sql
# Li·ªát k√™ t·∫•t c·∫£ c√°c b·∫£ng
sqlite> .table
User

# Xem c·∫•u tr√∫c c·ªßa b·∫£ng User
sqlite> .schema User
CREATE TABLE User(Name text, Age integer);
```

Nh·ªØng thao t√°c c∆° b·∫£n tr√™n ƒë√£ cung c·∫•p cho ch√∫ng ta n·ªÅn t·∫£ng ƒë·ªß ƒë·ªÉ b·∫Øt ƒë·∫ßu x√¢y d·ª±ng framework ORM. N·∫øu b·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ SQLite, h√£y tham kh·∫£o [C√°c l·ªánh th√¥ng d·ª•ng c·ªßa SQLite](https://www.sqlite.org/cli.html).

## 2. Th∆∞ vi·ªán chu·∫©n database/sql

Go cung c·∫•p th∆∞ vi·ªán chu·∫©n `database/sql` ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu. H√£y xem m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉu c√°ch s·ª≠ d·ª•ng th∆∞ vi·ªán n√†y:

```go
package main

import (
    "database/sql"
    "log"
    _ "github.com/mattn/go-sqlite3"
)

func main() {
    // K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu SQLite
    db, _ := sql.Open("sqlite3", "gee.db")
    defer func() { _ = db.Close() }()
    
    // T·∫°o b·∫£ng m·ªõi
    _, _ = db.Exec("DROP TABLE IF EXISTS User;")
    _, _ = db.Exec("CREATE TABLE User(Name text);")
    
    // Ch√®n d·ªØ li·ªáu v√† ki·ªÉm tra s·ªë b·∫£n ghi b·ªã ·∫£nh h∆∞·ªüng
    result, err := db.Exec("INSERT INTO User(`Name`) values (?), (?)", "Tom", "Sam")
    if err == nil {
        affected, _ := result.RowsAffected()
        log.Println(affected)
    }
    
    // Truy v·∫•n m·ªôt b·∫£n ghi
    row := db.QueryRow("SELECT Name FROM User LIMIT 1")
    var name string
    if err := row.Scan(&name); err == nil {
        log.Println(name)
    }
}
```

L∆∞u √Ω: Driver go-sqlite3 ph·ª• thu·ªôc v√†o gcc. N·∫øu b·∫°n ƒëang s·ª≠ d·ª•ng Windows, b·∫°n c·∫ßn c√†i ƒë·∫∑t mingw ho·∫∑c m·ªôt b·ªô c√¥ng c·ª• t∆∞∆°ng t·ª± c√≥ ch·ª©a tr√¨nh bi√™n d·ªãch gcc.

Khi th·ª±c thi `go run .`, b·∫°n s·∫Ω th·∫•y k·∫øt qu·∫£ nh∆∞ sau:

```
> go run .
2025/06/02 20:28:37 2
2025/06/02 20:28:37 Tom
```

Ph√¢n t√≠ch c√°c th√†nh ph·∫ßn ch√≠nh trong v√≠ d·ª•:

1. **K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu**: H√†m `sql.Open()` c·∫ßn hai th√¥ng tin: lo·∫°i c∆° s·ªü d·ªØ li·ªáu (sqlite3) v√† t√™n t·ªáp c∆° s·ªü d·ªØ li·ªáu (gee.db). D√≤ng `import _ "github.com/mattn/go-sqlite3"` gi√∫p Go bi·∫øt c√°ch k·∫øt n·ªëi v·ªõi SQLite. N·∫øu t·ªáp gee.db ch∆∞a t·ªìn t·∫°i, SQLite s·∫Ω t·ª± t·∫°o m·ªõi.

2. **Th·ª±c thi c√¢u l·ªánh SQL**: Ph∆∞∆°ng th·ª©c `Exec()` d√πng ƒë·ªÉ th·ª±c thi c√°c c√¢u l·ªánh kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu nh∆∞ CREATE, INSERT, UPDATE, DELETE. N√≥ tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng `sql.Result` cho ph√©p ki·ªÉm tra s·ªë b·∫£n ghi b·ªã ·∫£nh h∆∞·ªüng.

3. **Truy v·∫•n d·ªØ li·ªáu**: 
   - `QueryRow()` d√πng khi b·∫°n c·∫ßn truy v·∫•n m·ªôt b·∫£n ghi duy nh·∫•t
   - `Query()` d√πng khi c·∫ßn truy v·∫•n nhi·ªÅu b·∫£n ghi

4. **Tham s·ªë h√≥a truy v·∫•n**: C√°c ph∆∞∆°ng th·ª©c `Exec()`, `Query()`, `QueryRow()` ƒë·ªÅu h·ªó tr·ª£ tham s·ªë h√≥a v·ªõi placeholder `?`, gi√∫p ngƒÉn ch·∫∑n SQL injection. C√°c gi√° tr·ªã th·ª±c t·∫ø ƒë∆∞·ª£c truy·ªÅn v√†o sau c√¢u l·ªánh SQL.

5. **ƒê·ªçc k·∫øt qu·∫£ truy v·∫•n**: Ph∆∞∆°ng th·ª©c `Scan()` c·ªßa `*sql.Row` cho ph√©p ƒë·ªçc gi√° tr·ªã c·ªßa c√°c c·ªôt v√†o c√°c bi·∫øn Go t∆∞∆°ng ·ª©ng th√¥ng qua con tr·ªè.

Sau khi hi·ªÉu r√µ c√°ch s·ª≠ d·ª•ng th∆∞ vi·ªán chu·∫©n `database/sql`, ch√∫ng ta ƒë√£ c√≥ n·ªÅn t·∫£ng c·∫ßn thi·∫øt ƒë·ªÉ b·∫Øt ƒë·∫ßu x√¢y d·ª±ng framework ORM c·ªßa ri√™ng m√¨nh.

## 3. Tri·ªÉn khai m·ªôt th∆∞ vi·ªán log ƒë∆°n gi·∫£n

Khi ph√°t tri·ªÉn framework, vi·ªác c√≥ h·ªá th·ªëng log t·ªët gi√∫p ch√∫ng ta d·ªÖ d√†ng ph√°t hi·ªán v√† s·ª≠a l·ªói. Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu vi·∫øt m√£ l√µi c·ªßa GeeORM, ch√∫ng ta s·∫Ω t·∫°o m·ªôt th∆∞ vi·ªán log ƒë∆°n gi·∫£n nh∆∞ng hi·ªáu qu·∫£.

Th∆∞ vi·ªán log chu·∫©n c·ªßa Go c√≥ m·ªôt s·ªë h·∫°n ch·∫ø: kh√¥ng ph√¢n lo·∫°i log theo m·ª©c ƒë·ªô nghi√™m tr·ªçng v√† kh√¥ng t·ª± ƒë·ªông hi·ªÉn th·ªã t√™n file/s·ªë d√≤ng g√¢y l·ªói. Th∆∞ vi·ªán log c·ªßa ch√∫ng ta s·∫Ω kh·∫Øc ph·ª•c nh·ªØng h·∫°n ch·∫ø n√†y v·ªõi c√°c t√≠nh nƒÉng:

- Ph√¢n lo·∫°i log th√†nh ba c·∫•p ƒë·ªô: Info, Error v√† Disabled
- Hi·ªÉn th·ªã log v·ªõi m√†u s·∫Øc kh√°c nhau ƒë·ªÉ d·ªÖ ph√¢n bi·ªát
- T·ª± ƒë·ªông hi·ªÉn th·ªã t√™n file v√† s·ªë d√≤ng ph√°t sinh log

ƒê·∫ßu ti√™n, t·∫°o module cho d·ª± √°n:

```bash
go mod init geeorm
```

Sau ƒë√≥ t·∫°o file `log/log.go` v·ªõi c·∫•u tr√∫c th∆∞ m·ª•c nh∆∞ sau:

```
day1-database-sql/
    |-- log/
        |--log.go
    |--go.mod
```

Trong file `log.go`, ch√∫ng ta t·∫°o hai logger ri√™ng bi·ªát cho th√¥ng tin v√† l·ªói:

```go
package log

import (
    "io/ioutil"
    "log"
    "os"
    "sync"
)

var (
    errorLog = log.New(os.Stdout, "\033[31m[error]\033[0m ", log.LstdFlags|log.Lshortfile)
    infoLog = log.New(os.Stdout, "\033[34m[info ]\033[0m ", log.LstdFlags|log.Lshortfile)
    loggers = []*log.Logger{errorLog, infoLog}
    mu sync.Mutex
)

// log methods
var (
    Error = errorLog.Println
    Errorf = errorLog.Printf
    Info = infoLog.Println
    Infof = infoLog.Printf
)
```

Trong ƒëo·∫°n m√£ tr√™n:
- `[info ]` ƒë∆∞·ª£c hi·ªÉn th·ªã m√†u xanh d∆∞∆°ng v√† `[error]` m√†u ƒë·ªè nh·ªù m√£ ANSI
- Flag `log.Lshortfile` t·ª± ƒë·ªông th√™m t√™n file v√† s·ªë d√≤ng v√†o m·ªói log
- Ch√∫ng ta export 4 h√†m log ƒë·ªÉ s·ª≠ d·ª•ng: `Error`, `Errorf`, `Info`, `Infof`

Ti·∫øp theo, ch√∫ng ta th√™m kh·∫£ nƒÉng ƒëi·ªÅu ch·ªânh c·∫•p ƒë·ªô log:

```go
// log levels
const (
    InfoLevel = iota
    ErrorLevel
    Disabled
)

// SetLevel controls log level
func SetLevel(level int) {
    mu.Lock()
    defer mu.Unlock()

    for _, logger := range loggers {
        logger.SetOutput(os.Stdout)
    }

    if ErrorLevel < level {
        errorLog.SetOutput(ioutil.Discard)
    }
    if InfoLevel < level {
        infoLog.SetOutput(ioutil.Discard)
    }
}
```

H·ªá th·ªëng c·∫•p ƒë·ªô log ho·∫°t ƒë·ªông nh∆∞ sau:
- Ba c·∫•p ƒë·ªô ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a theo th·ª© t·ª± tƒÉng d·∫ßn: InfoLevel (0), ErrorLevel (1), v√† Disabled (2)
- Khi ƒë·∫∑t c·∫•p ƒë·ªô l√† ErrorLevel, ch·ªâ c√°c th√¥ng b√°o l·ªói ƒë∆∞·ª£c hi·ªÉn th·ªã, c√≤n th√¥ng tin th√¥ng th∆∞·ªùng b·ªã ·∫©n
- Khi ƒë·∫∑t c·∫•p ƒë·ªô l√† Disabled, kh√¥ng c√≥ log n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã

C∆° ch·∫ø n√†y ho·∫°t ƒë·ªông b·∫±ng c√°ch chuy·ªÉn h∆∞·ªõng ƒë·∫ßu ra c·ªßa logger ƒë·∫øn `ioutil.Discard`, m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·∫∑c bi·ªát trong Go s·∫Ω b·ªè qua t·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c ghi v√†o n√≥. ƒêi·ªÅu n√†y cho ph√©p ch√∫ng ta ki·ªÉm so√°t ch√≠nh x√°c nh·ªØng th√¥ng tin n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã trong qu√° tr√¨nh ph√°t tri·ªÉn v√† v·∫≠n h√†nh framework.

## 4. Session - L·ªõp t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu

Ch√∫ng ta s·∫Ω t·∫°o m·ªôt th∆∞ m·ª•c m·ªõi `session` trong th∆∞ m·ª•c g·ªëc ƒë·ªÉ ch·ª©a code li√™n quan ƒë·∫øn t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu. Trong ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t·∫≠p trung v√†o vi·ªác tri·ªÉn khai c√°c ph∆∞∆°ng th·ª©c c∆° b·∫£n ƒë·ªÉ th·ª±c thi c√¢u l·ªánh SQL. Code n√†y ƒë∆∞·ª£c ƒë·∫∑t trong file `session/raw.go`.

```go
package session

import (
    "database/sql"
    "geeorm/log"
    "strings"
)

type Session struct {
    db      *sql.DB
    sql     strings.Builder
    sqlVars []interface{}
}

func New(db *sql.DB) *Session {
    return &Session{db: db}
}

func (s *Session) Clear() {
    s.sql.Reset()
    s.sqlVars = nil
}

func (s *Session) DB() *sql.DB {
    return s.db
}

func (s *Session) Raw(sql string, values ...interface{}) *Session {
    s.sql.WriteString(sql)
    s.sql.WriteString(" ")
    s.sqlVars = append(s.sqlVars, values...)
    return s
}
```

C·∫•u tr√∫c `Session` c√≥ ba th√†nh ph·∫ßn ch√≠nh:
- `db *sql.DB`: K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu, ƒë∆∞·ª£c t·∫°o b·ªüi `sql.Open()`
- `sql strings.Builder`: D√πng ƒë·ªÉ x√¢y d·ª±ng c√¢u l·ªánh SQL
- `sqlVars []interface{}`: L∆∞u tr·ªØ c√°c tham s·ªë cho c√¢u l·ªánh SQL

Ph∆∞∆°ng th·ª©c `Raw()` cho ph√©p ng∆∞·ªùi d√πng vi·∫øt c√¢u l·ªánh SQL v·ªõi c√°c tham s·ªë, t∆∞∆°ng t·ª± nh∆∞ c√°ch s·ª≠ d·ª•ng `db.Exec()` ho·∫∑c `db.Query()`. Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ ch√≠nh ƒë·ªëi t∆∞·ª£ng Session, cho ph√©p g·ªçi theo chu·ªói (method chaining). V√≠ d·ª•, thay v√¨ vi·∫øt:

```go
session.Raw("SELECT * FROM users WHERE age > ?", 18)
rows, err := session.QueryRows()
```

Ch√∫ng ta c√≥ th·ªÉ vi·∫øt g·ªçn h∆°n:

```go
rows, err := session.Raw("SELECT * FROM users WHERE age > ?", 18).QueryRows()
```

Ti·∫øp theo, ch√∫ng ta ƒë√≥ng g√≥i ba ph∆∞∆°ng th·ª©c c∆° b·∫£n c·ªßa `database/sql`:

```go
// Exec th·ª±c thi c√¢u l·ªánh SQL v·ªõi c√°c tham s·ªë
func (s *Session) Exec() (result sql.Result, err error) {
    defer s.Clear()
    log.Info(s.sql.String(), s.sqlVars)
    if result, err = s.DB().Exec(s.sql.String(), s.sqlVars...); err != nil {
        log.Error(err)
    }
    return
}

// QueryRow tr·∫£ v·ªÅ m·ªôt b·∫£n ghi t·ª´ c∆° s·ªü d·ªØ li·ªáu
func (s *Session) QueryRow() *sql.Row {
    defer s.Clear()
    log.Info(s.sql.String(), s.sqlVars)
    return s.DB().QueryRow(s.sql.String(), s.sqlVars...)
}

// QueryRows tr·∫£ v·ªÅ nhi·ªÅu b·∫£n ghi t·ª´ c∆° s·ªü d·ªØ li·ªáu
func (s *Session) QueryRows() (rows *sql.Rows, err error) {
    defer s.Clear()
    log.Info(s.sql.String(), s.sqlVars)
    if rows, err = s.DB().Query(s.sql.String(), s.sqlVars...); err != nil {
        log.Error(err)
    }
    return
}
```

Vi·ªác ƒë√≥ng g√≥i c√°c ph∆∞∆°ng th·ª©c n√†y mang l·∫°i hai l·ª£i √≠ch ch√≠nh:

1. **Ghi log t·ª± ƒë·ªông**: M·ªói c√¢u l·ªánh SQL v√† c√°c tham s·ªë c·ªßa n√≥ ƒë·ªÅu ƒë∆∞·ª£c ghi l·∫°i tr∆∞·ªõc khi th·ª±c thi, gi√∫p d·ªÖ d√†ng theo d√µi v√† debug.

2. **T·ª± ƒë·ªông l√†m s·∫°ch**: Sau khi th·ª±c thi xong, ph∆∞∆°ng th·ª©c `Clear()` ƒë∆∞·ª£c g·ªçi ƒë·ªÉ x√≥a c√¢u l·ªánh SQL v√† c√°c tham s·ªë, chu·∫©n b·ªã Session cho l·∫ßn s·ª≠ d·ª•ng ti·∫øp theo. ƒêi·ªÅu n√†y cho ph√©p t√°i s·ª≠ d·ª•ng m·ªôt ƒë·ªëi t∆∞·ª£ng Session cho nhi·ªÅu c√¢u l·ªánh SQL kh√°c nhau.

V·ªõi thi·∫øt k·∫ø n√†y, ng∆∞·ªùi d√πng c√≥ th·ªÉ d·ªÖ d√†ng th·ª±c thi c√°c c√¢u l·ªánh SQL theo c√°ch r√µ r√†ng v√† linh ho·∫°t:

```go
session.Raw("DROP TABLE IF EXISTS User;").Exec()
session.Raw("CREATE TABLE User(Name text);").Exec()
session.Raw("INSERT INTO User(`Name`) values (?), (?)", "Tom", "Sam").Exec()
```

## 5. Engine - L·ªõp giao ti·∫øp ch√≠nh c·ªßa framework

Trong khi `Session` ch·ªãu tr√°ch nhi·ªám th·ª±c hi·ªán c√°c thao t√°c tr·ª±c ti·∫øp v·ªõi c∆° s·ªü d·ªØ li·ªáu, `Engine` ƒë·∫£m nh·∫≠n vai tr√≤ qu·∫£n l√Ω k·∫øt n·ªëi v√† cung c·∫•p giao di·ªán cho ng∆∞·ªùi d√πng. `Engine` x·ª≠ l√Ω c√°c c√¥ng vi·ªác nh∆∞ thi·∫øt l·∫≠p k·∫øt n·ªëi ban ƒë·∫ßu, ki·ªÉm tra t√¨nh tr·∫°ng k·∫øt n·ªëi v√† ƒë√≥ng k·∫øt n·ªëi khi c·∫ßn thi·∫øt. M√£ ngu·ªìn c·ªßa `Engine` ƒë∆∞·ª£c ƒë·∫∑t trong file `geeorm.go` ·ªü th∆∞ m·ª•c g·ªëc.

```go
package geeorm

import (
    "database/sql"
    "geeorm/log"
    "geeorm/session"
)

type Engine struct {
    db *sql.DB
}

func NewEngine(driver, source string) (e *Engine, err error) {
    db, err := sql.Open(driver, source)
    if err != nil {
        log.Error(err)
        return
    }
    // G·ª≠i m·ªôt ping ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu c√≤n s·ªëng.
    if err = db.Ping(); err != nil {
        log.Error(err)
        return
    }
    e = &Engine{db: db}
    log.Info("Connect database success")
    return
}

func (engine *Engine) Close() {
    if err := engine.db.Close(); err != nil {
        log.Error("Failed to close database")
    }
    log.Info("Close database success")
}

func (engine *Engine) NewSession() *session.Session {
    return session.New(engine.db)
}
```

C·∫•u tr√∫c c·ªßa `Engine` kh√° ƒë∆°n gi·∫£n, v·ªõi ph∆∞∆°ng th·ª©c ch√≠nh l√† `NewEngine`. Ph∆∞∆°ng th·ª©c n√†y th·ª±c hi·ªán hai nhi·ªám v·ª• quan tr·ªçng:

1. Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu th√¥ng qua `sql.Open()`
2. Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch g·ªçi `db.Ping()` ƒë·ªÉ ƒë·∫£m b·∫£o c∆° s·ªü d·ªØ li·ªáu ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng

`Engine` c≈©ng cung c·∫•p ph∆∞∆°ng th·ª©c `NewSession()` ƒë·ªÉ t·∫°o ra c√°c ƒë·ªëi t∆∞·ª£ng `Session` m·ªõi, cho ph√©p ng∆∞·ªùi d√πng th·ª±c hi·ªán c√°c thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu. V·ªõi c·∫•u tr√∫c n√†y, ng∆∞·ªùi d√πng ch·ªâ c·∫ßn t∆∞∆°ng t√°c v·ªõi `Engine` ƒë·ªÉ s·ª≠ d·ª•ng to√†n b·ªô ch·ª©c nƒÉng c·ªßa framework.

ƒê·∫øn ƒë√¢y, c·∫•u tr√∫c c∆° b·∫£n c·ªßa GeeORM ƒë√£ ho√†n th√†nh:

```
day1-database-sql/
    |-- log/           # H·ªá th·ªëng log
         |--log.go
    |--session/       # T∆∞∆°ng t√°c c∆° s·ªü d·ªØ li·ªáu
         |--raw.go
    |--geeorm.go      # L·ªõp giao ti·∫øp ch√≠nh
     |--go.mod
```

## 6. Th·ª≠ nghi·ªám framework

GeeORM c√≥ b·ªô unit test kh√° ƒë·∫ßy ƒë·ªß. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c file nh∆∞ `log_test.go`, `raw_test.go` v√† `geeorm_test.go`. Ch√∫ng ta s·∫Ω kh√¥ng ƒëi s√¢u v√†o t·ª´ng file test ·ªü ƒë√¢y. Thay v√†o ƒë√≥, h√£y xem c√°ch s·ª≠ d·ª•ng GeeORM trong m·ªôt ·ª©ng d·ª•ng th·ª±c t·∫ø.

T·∫°o m·ªôt th∆∞ m·ª•c `cmd_test` trong th∆∞ m·ª•c g·ªëc v√† th√™m file `main.go` v·ªõi n·ªôi dung sau:

```go
package main

import (
    "fmt"
    "geeorm"
    "geeorm/log"
    _ "github.com/mattn/go-sqlite3"
)

func main() {
    engine, _ := geeorm.NewEngine("sqlite3", "gee.db")
    defer engine.Close()
    
    s := engine.NewSession()
    _, _ = s.Raw("DROP TABLE IF EXISTS User;").Exec()
    _, _ = s.Raw("CREATE TABLE User(Name text);").Exec()
    _, _ = s.Raw("CREATE TABLE User(Name text);").Exec()
    
    result, _ := s.Raw("INSERT INTO User(`Name`) values (?), (?)", "Tom", "Sam").Exec()
    count, _ := result.RowsAffected()
    fmt.Printf("Exec success, %d affected\n", count)
}
```

Khi ch·∫°y `go run main.go`, b·∫°n s·∫Ω th·∫•y k·∫øt qu·∫£ nh∆∞ sau:

![geeorm log](/img/gee-orm/part-2/geeorm-log.png)

Trong log xu·∫•t hi·ªán th√¥ng b√°o l·ªói `table User already exists` v√¨ ch√∫ng ta ƒë√£ c·ªë g·∫Øng t·∫°o b·∫£ng `User` hai l·∫ßn li√™n ti·∫øp. B·∫°n c√≥ th·ªÉ th·∫•y m·ªói d√≤ng log ƒë·ªÅu hi·ªÉn th·ªã t√™n file v√† s·ªë d√≤ng ph√°t sinh log, c√πng v·ªõi m√†u s·∫Øc kh√°c nhau cho c√°c c·∫•p ƒë·ªô log kh√°c nhau.

## K·∫øt lu·∫≠n

Trong ph·∫ßn ƒë·∫ßu ti√™n n√†y, ch√∫ng ta ƒë√£:

1. T√¨m hi·ªÉu c√°c thao t√°c c∆° b·∫£n v·ªõi SQLite
2. S·ª≠ d·ª•ng th∆∞ vi·ªán chu·∫©n `database/sql` c·ªßa Go ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu
3. X√¢y d·ª±ng m·ªôt th∆∞ vi·ªán log ƒë∆°n gi·∫£n
4. Tri·ªÉn khai c·∫•u tr√∫c Session ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu
5. Tri·ªÉn khai c·∫•u tr√∫c Engine l√†m ƒëi·ªÉm giao ti·∫øp ch√≠nh c·ªßa framework

ƒê√¢y l√† n·ªÅn t·∫£ng cho c√°c ph·∫ßn ti·∫øp theo, n∆°i ch√∫ng ta s·∫Ω x√¢y d·ª±ng c√°c t√≠nh nƒÉng ORM th·ª±c s·ª± nh∆∞ √°nh x·∫° ƒë·ªëi t∆∞·ª£ng, truy v·∫•n, c·∫≠p nh·∫≠t v√† x√≥a b·∫£n ghi.
















