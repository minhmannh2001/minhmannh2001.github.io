---
layout: post
title: "Build your own X: X√¢y d·ª±ng ORM framework v·ªõi Go - Ph·∫ßn 6"
date: '2025-06-14 08:00:00 +0700'
excerpt: >
  Ph·∫ßn 6 trong chu·ªói b√†i v·ªÅ x√¢y d·ª±ng ORM framework v·ªõi Go. Trong b√†i n√†y, ta s·∫Ω t√¨m hi·ªÉu v·ªÅ transaction trong database, t√≠nh ch·∫•t ACID, c√°ch s·ª≠ d·ª•ng trong Go, v√† c√°ch t√≠ch h·ª£p v√†o GeeORM ƒë·ªÉ ƒë·∫£m b·∫£o c√°c thao t√°c an to√†n v√† c√≥ th·ªÉ rollback.
comments: false
---

# Ph·∫ßn 6: H·ªó tr·ª£ Transaction trong ORM Framework GeeORM

üëâ [M√£ ngu·ªìn ƒë·∫ßy ƒë·ªß tr√™n GitHub](https://github.com/minhmannh2001/7-days-golang)

ƒê√¢y l√† b√†i vi·∫øt th·ª© s√°u trong lo·∫°t h∆∞·ªõng d·∫´n t·ª± x√¢y d·ª±ng ORM framework GeeORM v·ªõi Go trong 7 ng√†y.

·ªû ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ transaction (giao d·ªãch) trong database v√† c√°ch h·ªó tr·ª£ n√≥ trong ORM Framework GeeORM.

## 1. T√≠nh ch·∫•t ACID c·ªßa Transaction

Transaction trong database l√† m·ªôt chu·ªói c√°c thao t√°c truy c·∫≠p v√† thay ƒë·ªïi d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu. C√°c thao t√°c n√†y ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán theo nguy√™n t·∫Øc **t·∫•t c·∫£ ho·∫∑c kh√¥ng c√≥ g√¨**. N√≥i c√°ch kh√°c, n·∫øu m·ªôt giao d·ªãch bao g·ªìm nhi·ªÅu thao t√°c, th√¨ t·∫•t c·∫£ c√°c thao t√°c ƒë√≥ ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng, ho·∫∑c kh√¥ng c√≥ thao t√°c n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.

V√≠ d·ª• th·ª±c t·∫ø: 

Chuy·ªÉn kho·∫£n. 
Khi A chuy·ªÉn 10,000 VNƒê cho B, database c·∫ßn th·ª±c hi·ªán 2 b∆∞·ªõc:

- B∆∞·ªõc 1: Gi·∫£m 10,000 VNƒê t·ª´ t√†i kho·∫£n c·ªßa A.
- B∆∞·ªõc 2: TƒÉng 10,000 VNƒê v√†o t√†i kho·∫£n c·ªßa B.

K·∫øt qu·∫£:
- N·∫øu c·∫£ 2 b∆∞·ªõc th√†nh c√¥ng, chuy·ªÉn kho·∫£n th√†nh c√¥ng.
- N·∫øu 1 trong 2 b∆∞·ªõc th·∫•t b·∫°i, b∆∞·ªõc tr∆∞·ªõc ƒë√≥ ph·∫£i ƒë∆∞·ª£c ho√†n t√°c (rollback), chuy·ªÉn kho·∫£n th·∫•t b·∫°i.
- Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n ƒë∆∞·ª£c t√¨nh hu·ªëng m·ªôt b∆∞·ªõc th√†nh c√¥ng, b∆∞·ªõc c√≤n l·∫°i th·∫•t b·∫°i.

ƒê√¢y l√† m·ªôt v√≠ d·ª• ƒëi·ªÉn h√¨nh v·ªÅ vi·ªác s·ª≠ d·ª•ng giao d·ªãch (transaction) trong c∆° s·ªü d·ªØ li·ªáu.

N·∫øu m·ªôt database h·ªó tr·ª£ transaction, n√≥ ph·∫£i c√≥ 4 t√≠nh ch·∫•t ACID:

1.  **Atomicity (T√≠nh nguy√™n t·ª≠):** T·∫•t c·∫£ c√°c thao t√°c trong m·ªôt transaction l√† kh√¥ng th·ªÉ chia c·∫Øt. Ho·∫∑c t·∫•t c·∫£ ƒë∆∞·ª£c th·ª±c hi·ªán, ho·∫∑c kh√¥ng c√≥ thao t√°c n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.
2.  **Consistency (T√≠nh nh·∫•t qu√°n):** K·∫øt qu·∫£ c·ªßa vi·ªác th·ª±c hi·ªán ƒë·ªìng th·ªùi nhi·ªÅu transaction ph·∫£i gi·ªëng v·ªõi k·∫øt qu·∫£ c·ªßa vi·ªác th·ª±c hi·ªán tu·∫ßn t·ª± c√°c transaction theo m·ªôt th·ª© t·ª± nh·∫•t ƒë·ªãnh.
3.  **Isolation (T√≠nh c√¥ l·∫≠p):** Vi·ªác th·ª±c hi·ªán m·ªôt transaction kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi c√°c transaction kh√°c. K·∫øt qu·∫£ trung gian c·ªßa transaction ph·∫£i "trong su·ªët" v·ªõi c√°c transaction kh√°c.
4.  **Durability (T√≠nh b·ªÅn v·ªØng):** V·ªõi b·∫•t k·ª≥ transaction n√†o ƒë√£ ƒë∆∞·ª£c commit (ho√†n th√†nh), h·ªá th·ªëng ph·∫£i ƒë·∫£m b·∫£o r·∫±ng c√°c thay ƒë·ªïi ƒë∆∞·ª£c th·ª±c hi·ªán ƒë·ªëi v·ªõi database s·∫Ω kh√¥ng b·ªã m·∫•t, ngay c·∫£ khi database g·∫∑p s·ª± c·ªë.

## 2. Hi·ªÉu v·ªÅ Transaction trong SQLite v√† c√°ch Go h·ªó tr·ª£ th√¥ng qua `database/sql`

C√¢u l·ªánh SQL ƒë·ªÉ t·∫°o m·ªôt transaction trong SQLite tr√¥ng nh∆∞ th·∫ø n√†o?

```sql
sqlite> BEGIN;
sqlite> DELETE FROM User WHERE Age > 25;
sqlite> INSERT INTO User VALUES ("Tom", 25), ("Jack", 18);
sqlite> COMMIT;
```

`BEGIN` ƒë·ªÉ b·∫Øt ƒë·∫ßu transaction, `COMMIT` ƒë·ªÉ commit transaction, v√† `ROLLBACK` ƒë·ªÉ rollback transaction. M·ªôt transaction b·∫Øt ƒë·∫ßu v·ªõi `BEGIN` v√† k·∫øt th√∫c v·ªõi `COMMIT` ho·∫∑c `ROLLBACK`.

Th∆∞ vi·ªán chu·∫©n `database/sql` c·ªßa Go cung c·∫•p interface ƒë·ªÉ h·ªó tr·ª£ transaction. H√£y xem m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n:

```go
package main

import (
	"database/sql"
	_ "github.com/mattn/go-sqlite3"
	"log"
)

func main() {
	db, _ := sql.Open("sqlite3", "gee.db")
	defer func() { _ = db.Close() }()
	_, _ = db.Exec("CREATE TABLE IF NOT EXISTS User(\`Name\` text);")

	tx, _ := db.Begin()
	_, err1 := tx.Exec("INSERT INTO User(\`Name\`) VALUES (?)", "Tom")
	_, err2 := tx.Exec("INSERT INTO User(\`Name\`) VALUES (?)", "Jack")
	if err1 != nil || err2 != nil {
		_ = tx.Rollback()
		log.Println("Rollback", err1, err2)
	} else {
		_ = tx.Commit()
		log.Println("Commit")
	}
}
```

Vi·ªác th·ª±c hi·ªán transaction trong Go r·∫•t gi·ªëng v·ªõi c√°c c√¢u l·ªánh SQL. G·ªçi `db.Begin()` ƒë·ªÉ l·∫•y m·ªôt ƒë·ªëi t∆∞·ª£ng `*sql.Tx`, s·ª≠ d·ª•ng `tx.Exec()` ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c. N·∫øu c√≥ l·ªói x·∫£y ra, g·ªçi `tx.Rollback()` ƒë·ªÉ rollback. N·∫øu kh√¥ng c√≥ l·ªói, g·ªçi `tx.Commit()` ƒë·ªÉ commit.

## 3. GeeORM h·ªó tr·ª£ Transaction

Tr∆∞·ªõc ƒë√¢y, m·ªçi thao t√°c trong GeeORM ƒë·ªÅu ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt c√°ch ƒë·ªôc l·∫≠p v√† s·∫Ω t·ª± ƒë·ªông commit sau khi th·ª±c hi·ªán xong. Ta s·ª≠ d·ª•ng `sql.DB` ƒë·ªÉ ch·∫°y c√°c l·ªánh SQL. Tuy nhi√™n, ƒë·ªÉ h·ªó tr·ª£ transaction (giao d·ªãch), ta c·∫ßn thay ƒë·ªïi sang s·ª≠ d·ª•ng `sql.Tx`.

Gi·∫£i ph√°p l√†:

- Th√™m m·ªôt bi·∫øn `tx *sql.Tx` v√†o trong struct Session.
- Khi `tx` kh√°c nil, ta s·ª≠ d·ª•ng `tx` ƒë·ªÉ th·ª±c hi·ªán truy v·∫•n SQL.
- Ng∆∞·ª£c l·∫°i, n·∫øu `tx` l√† nil, ta d√πng `db` nh∆∞ tr∆∞·ªõc kia.

ƒêi·ªÅu n√†y gi√∫p ta v·ª´a gi·ªØ ƒë∆∞·ª£c c√°ch th·ª±c thi c≈©, v·ª´a h·ªó tr·ª£ th√™m transaction m√† kh√¥ng ph√° v·ª° thi·∫øt k·∫ø c≈©.

`part-6-transaction/session/raw.go`

```go
type Session struct {
	db       *sql.DB
	dialect  dialect.Dialect
	tx       *sql.Tx
	refTable *schema.Schema
	clause   clause.Clause
	sql      strings.Builder
	sqlVars  []interface{}
}

// Interface chung gi·ªØa *sql.DB v√† *sql.Tx ƒë·ªÉ d√πng chung trong Session
type CommonDB interface {
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Exec(query string, args ...interface{}) (sql.Result, error)
}

// ƒê·∫£m b·∫£o r·∫±ng *sql.DB v√† *sql.Tx ƒë·ªÅu tho·∫£ m√£n interface CommonDB
var _ CommonDB = (*sql.DB)(nil)
var _ CommonDB = (*sql.Tx)(nil)

// H√†m DB tr·∫£ v·ªÅ *sql.Tx n·∫øu c√≥ giao d·ªãch ƒëang m·ªü, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ *sql.DB
func (s *Session) DB() CommonDB {
	if s.tx != nil {
		return s.tx
	}
	return s.db
}
```

T·∫°o m·ªôt file m·ªõi `session/transaction.go` ƒë·ªÉ ƒë√≥ng g√≥i c√°c interface `Begin`, `Commit` v√† `Rollback` c·ªßa transaction. C√°ch l√†m n√†y c√≤n gi√∫p ghi log d·ªÖ ki·ªÉm tra l·ªói h∆°n.

`part-6-transaction/session/transaction.go`

```go
package session

import "geeorm/log"

// B·∫Øt ƒë·∫ßu m·ªôt transaction
func (s *Session) Begin() (err error) {
	log.Info("transaction begin") // Ghi log b·∫Øt ƒë·∫ßu transaction
	if s.tx, err = s.db.Begin(); err != nil {
		log.Error(err)
		return
	}
	return
}

// X√°c nh·∫≠n transaction (commit)
func (s *Session) Commit() (err error) {
	log.Info("transaction commit") // Ghi log khi commit
	if err = s.tx.Commit(); err != nil {
		log.Error(err)
	}
	return
}

// Hu·ª∑ transaction (rollback)
func (s *Session) Rollback() (err error) {
	log.Info("transaction rollback") // Ghi log khi rollback
	if err = s.tx.Rollback(); err != nil {
		log.Error(err)
	}
	return
}
```

G·ªçi `s.db.Begin()` ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng `*sql.Tx` v√† g√°n n√≥ cho `s.tx`.

Trong b∆∞·ªõc cu·ªëi, ta t·∫°o m·ªôt h√†m Transaction ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng d·ªÖ s·ª≠ d·ª•ng. H·ªç ch·ªâ c·∫ßn vi·∫øt to√†n b·ªô thao t√°c trong m·ªôt h√†m callback v√† truy·ªÅn n√≥ nh∆∞ m·ªôt tham s·ªë ƒë·∫ßu v√†o cho `engine.Transaction()`

`part-6-transaction/geeorm.go`

```go
package geeorm

import "geeorm/session"

// TxFunc l√† ki·ªÉu h√†m callback nh·∫≠n v√†o m·ªôt Session
type TxFunc func(*session.Session) (interface{}, error)

// H√†m Transaction th·ª±c thi TxFunc trong m·ªôt transaction
func (engine *Engine) Transaction(f TxFunc) (result interface{}, err error) {
	s := engine.NewSession()        // T·∫°o session m·ªõi
	if err := s.Begin(); err != nil {
		return nil, err
	}

	// ƒê·∫£m b·∫£o sau khi th·ª±c thi s·∫Ω x·ª≠ l√Ω rollback ho·∫∑c commit ƒë√∫ng c√°ch
	defer func() {
		if p := recover(); p != nil {
			_ = s.Rollback() // N·∫øu panic, rollback
			panic(p)         // Sau ƒë√≥ panic l·∫°i
		} else if err != nil {
			_ = s.Rollback() // N·∫øu c√≥ l·ªói, rollback
		} else {
			err = s.Commit() // Kh√¥ng c√≥ l·ªói, commit
		}
	}()

	// Th·ª±c thi h√†m ng∆∞·ªùi d√πng truy·ªÅn v√†o
	return f(s)
}
```

N·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra, n√≥ s·∫Ω t·ª± ƒë·ªông rollback. N·∫øu kh√¥ng c√≥ l·ªói, n√≥ s·∫Ω commit.

**C√°ch s·ª≠ d·ª•ng t·ª´ ph√≠a ng∆∞·ªùi d√πng**
Ng∆∞·ªùi d√πng ch·ªâ c·∫ßn g√≥i c√°c thao t√°c trong m·ªôt h√†m v√† g·ªçi:
```go
engine.Transaction(func(s *Session) (interface{}, error) {
    // Th·ª±c hi·ªán c√°c thao t√°c DB ·ªü ƒë√¢y
    // N·∫øu l·ªói, ch·ªâ c·∫ßn return error, transaction s·∫Ω rollback
    // N·∫øu th√†nh c√¥ng, s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông commit
    return nil, nil
})
```
## 4. Ki·ªÉm th·ª≠

Trong ph·∫ßn n√†y, ch√∫ng ta s·∫Ω vi·∫øt c√°c h√†m ki·ªÉm th·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nƒÉng Transaction ho·∫°t ƒë·ªông ƒë√∫ng nh∆∞ mong ƒë·ª£i. C·ª• th·ªÉ, ta s·∫Ω ki·ªÉm tra hai tr∆∞·ªùng h·ª£p: khi rollback (hu·ª∑ giao d·ªãch) v√† khi commit (x√°c nh·∫≠n giao d·ªãch).

```go
package geeorm

import (
	"errors"
	"fmt"
	"geeorm/session"
	_ "github.com/mattn/go-sqlite3"
	"testing"
)

func OpenDB(t *testing.T) *Engine {
	t.Helper()
	engine, err := NewEngine("sqlite3", "gee.db")
	if err != nil {
		t.Fatal("failed to connect", err)
	}
	return engine
}

type User struct {
	Name string `geeorm:"PRIMARY KEY"`
	Age  int
}

func TestEngine_Transaction(t *testing.T) {
	t.Run("rollback", func(t *testing.T) {
		transactionRollback(t) // Ki·ªÉm tra rollback
	})
	t.Run("commit", func(t *testing.T) {
		transactionCommit(t) // Ki·ªÉm tra commit
	})
}
```

#### Tr∆∞·ªùng h·ª£p 1: Rollback

```go
func transactionRollback(t *testing.T) {
	engine := OpenDB(t)
	defer engine.Close()

	s := engine.NewSession()
	_ = s.Model(&User{}).DropTable() // Xo√° b·∫£ng User n·∫øu t·ªìn t·∫°i

	_, err := engine.Transaction(func(s *session.Session) (interface{}, error) {
		_ = s.Model(&User{}).CreateTable()       // T·∫°o b·∫£ng User
		_, err := s.Insert(&User{"Tom", 18})     // Th√™m b·∫£n ghi
		return nil, errors.New("Error")          // C·ªë t√¨nh tr·∫£ l·ªói ƒë·ªÉ rollback
	})

	// Sau rollback, b·∫£ng User s·∫Ω kh√¥ng t·ªìn t·∫°i
	if err == nil || s.HasTable() {
		t.Fatal("failed to rollback")
	}
}
```
**Gi·∫£i th√≠ch**
Trong h√†m n√†y, ta c·ªë t√¨nh tr·∫£ v·ªÅ l·ªói sau khi t·∫°o b·∫£ng v√† ch√®n d·ªØ li·ªáu. ƒêi·ªÅu n√†y khi·∫øn transaction b·ªã rollback, do ƒë√≥ b·∫£ng User s·∫Ω kh√¥ng ƒë∆∞·ª£c t·∫°o ra.

#### Tr∆∞·ªùng h·ª£p 2: Commit

```go
func transactionCommit(t *testing.T) {
	engine := OpenDB(t)
	defer engine.Close()

	s := engine.NewSession()
	_ = s.Model(&User{}).DropTable() // Xo√° b·∫£ng User n·∫øu t·ªìn t·∫°i

	_, err := engine.Transaction(func(s *session.Session) (interface{}, error) {
		_ = s.Model(&User{}).CreateTable()       // T·∫°o b·∫£ng
		_, err := s.Insert(&User{"Tom", 18})     // Ch√®n b·∫£n ghi
		return nil, err
	})

	u := &User{}
	_ = s.First(u) // Truy v·∫•n b·∫£n ghi ƒë·∫ßu ti√™n

	if err != nil || u.Name != "Tom" {
		t.Fatal("failed to commit")
	}
}
```

**Gi·∫£i th√≠ch**
Trong tr∆∞·ªùng h·ª£p n√†y, kh√¥ng c√≥ l·ªói n√†o x·∫£y ra n√™n transaction s·∫Ω ƒë∆∞·ª£c commit. B·∫£ng User s·∫Ω ƒë∆∞·ª£c t·∫°o v√† d·ªØ li·ªáu ƒë∆∞·ª£c ch√®n th√†nh c√¥ng. Sau ƒë√≥, ta truy v·∫•n l·∫°i ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu.

## 5. K·∫øt lu·∫≠n

Trong b√†i vi·∫øt n√†y, ch√∫ng ta ƒë√£ t√¨m hi·ªÉu v·ªÅ transaction trong database, t√≠nh ch·∫•t ACID, c√°ch s·ª≠ d·ª•ng transaction trong Go v·ªõi th∆∞ vi·ªán `database/sql`, v√† c√°ch t√≠ch h·ª£p transaction v√†o GeeORM. Ch√∫ng ta c≈©ng ƒë√£ vi·∫øt c√°c h√†m ki·ªÉm th·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nƒÉng transaction ho·∫°t ƒë·ªông ƒë√∫ng nh∆∞ mong ƒë·ª£i. Vi·ªác h·ªó tr·ª£ transaction gi√∫p GeeORM ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu v√† an to√†n trong c√°c thao t√°c v·ªõi database.
